<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [./build/Buck-Boost/Buck-Boost.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ./build/Buck-Boost/Buck-Boost.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6210000: Last Updated: Mon Apr 22 00:09:44 2024
<BR><P>
<H3>Maximum Stack Usage =        636 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; OLED_Display &rArr; OLED_Update &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[47]">ADC4_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[48]">ADC5_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[70]">ADC_DMAConvCplt</a> from stm32g4xx_hal_adc.o(.text) referenced 4 times from stm32g4xx_hal_adc.o(.text)
 <LI><a href="#[72]">ADC_DMAError</a> from stm32g4xx_hal_adc.o(.text) referenced 4 times from stm32g4xx_hal_adc.o(.text)
 <LI><a href="#[71]">ADC_DMAHalfConvCplt</a> from stm32g4xx_hal_adc.o(.text) referenced 4 times from stm32g4xx_hal_adc.o(.text)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32g4xx_it.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[4a]">COMP1_2_3_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[4b]">COMP4_5_6_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[4c]">COMP7_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[6d]">CORDIC_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[55]">CRS_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from stm32g4xx_it.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from stm32g4xx_it.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from stm32g4xx_it.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[69]">DMA1_Channel8_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[46]">DMA2_Channel5_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[6a]">DMA2_Channel6_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[6b]">DMA2_Channel7_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[6c]">DMA2_Channel8_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[67]">DMAMUX_OVR_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32g4xx_it.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32g4xx_it.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[1f]">FDCAN1_IT0_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[20]">FDCAN1_IT1_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[5f]">FDCAN2_IT0_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[60]">FDCAN2_IT1_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[61]">FDCAN3_IT0_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[62]">FDCAN3_IT1_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[6e]">FMAC_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[5b]">FPU_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[53]">HRTIM1_FLT_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[4d]">HRTIM1_Master_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[4e]">HRTIM1_TIMA_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[4f]">HRTIM1_TIMB_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[50]">HRTIM1_TIMC_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[51]">HRTIM1_TIMD_IRQHandler</a> from stm32g4xx_it.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[52]">HRTIM1_TIME_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[54]">HRTIM1_TIMF_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[76]">HRTIM_BurstDMACplt</a> from stm32g4xx_hal_hrtim.o(.text) referenced 2 times from stm32g4xx_hal_hrtim.o(.text)
 <LI><a href="#[75]">HRTIM_DMAError</a> from stm32g4xx_hal_hrtim.o(.text) referenced 14 times from stm32g4xx_hal_hrtim.o(.text)
 <LI><a href="#[73]">HRTIM_DMAMasterCplt</a> from stm32g4xx_hal_hrtim.o(.text) referenced 4 times from stm32g4xx_hal_hrtim.o(.text)
 <LI><a href="#[74]">HRTIM_DMATimerxCplt</a> from stm32g4xx_hal_hrtim.o(.text) referenced 10 times from stm32g4xx_hal_hrtim.o(.text)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32g4xx_it.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[66]">I2C3_ER_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[65]">I2C3_EV_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[5d]">I2C4_ER_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[5c]">I2C4_EV_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[82]">I2C_DMAAbort</a> from stm32g4xx_hal_i2c.o(.text) referenced 16 times from stm32g4xx_hal_i2c.o(.text)
 <LI><a href="#[7d]">I2C_DMAError</a> from stm32g4xx_hal_i2c.o(.text) referenced 20 times from stm32g4xx_hal_i2c.o(.text)
 <LI><a href="#[7e]">I2C_DMAMasterReceiveCplt</a> from stm32g4xx_hal_i2c.o(.text) referenced 6 times from stm32g4xx_hal_i2c.o(.text)
 <LI><a href="#[7c]">I2C_DMAMasterTransmitCplt</a> from stm32g4xx_hal_i2c.o(.text) referenced 6 times from stm32g4xx_hal_i2c.o(.text)
 <LI><a href="#[80]">I2C_DMASlaveReceiveCplt</a> from stm32g4xx_hal_i2c.o(.text) referenced 4 times from stm32g4xx_hal_i2c.o(.text)
 <LI><a href="#[7f]">I2C_DMASlaveTransmitCplt</a> from stm32g4xx_hal_i2c.o(.text) referenced 4 times from stm32g4xx_hal_i2c.o(.text)
 <LI><a href="#[78]">I2C_Master_ISR_DMA</a> from stm32g4xx_hal_i2c.o(.text) referenced 10 times from stm32g4xx_hal_i2c.o(.text)
 <LI><a href="#[77]">I2C_Master_ISR_IT</a> from stm32g4xx_hal_i2c.o(.text) referenced 16 times from stm32g4xx_hal_i2c.o(.text)
 <LI><a href="#[7a]">I2C_Mem_ISR_DMA</a> from stm32g4xx_hal_i2c.o(.text) referenced 6 times from stm32g4xx_hal_i2c.o(.text)
 <LI><a href="#[81]">I2C_Mem_ISR_IT</a> from stm32g4xx_hal_i2c.o(.text) referenced 4 times from stm32g4xx_hal_i2c.o(.text)
 <LI><a href="#[79]">I2C_Slave_ISR_DMA</a> from stm32g4xx_hal_i2c.o(.text) referenced 10 times from stm32g4xx_hal_i2c.o(.text)
 <LI><a href="#[7b]">I2C_Slave_ISR_IT</a> from stm32g4xx_hal_i2c.o(.text) referenced 12 times from stm32g4xx_hal_i2c.o(.text)
 <LI><a href="#[3b]">LPTIM1_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[64]">LPUART1_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32g4xx_it.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32g4xx_it.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[b]">PVD_PVM_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32g4xx_it.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[68]">QUADSPI_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[63]">RNG_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[c]">RTC_TAMP_LSECSS_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[56]">SAI1_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[5e]">SPI4_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[87]">SPI_2linesRxISR_16BIT</a> from stm32g4xx_hal_spi.o(.text) referenced 2 times from stm32g4xx_hal_spi.o(.text)
 <LI><a href="#[89]">SPI_2linesRxISR_8BIT</a> from stm32g4xx_hal_spi.o(.text) referenced 2 times from stm32g4xx_hal_spi.o(.text)
 <LI><a href="#[88]">SPI_2linesTxISR_16BIT</a> from stm32g4xx_hal_spi.o(.text) referenced 2 times from stm32g4xx_hal_spi.o(.text)
 <LI><a href="#[8a]">SPI_2linesTxISR_8BIT</a> from stm32g4xx_hal_spi.o(.text) referenced 2 times from stm32g4xx_hal_spi.o(.text)
 <LI><a href="#[93]">SPI_AbortRx_ISR</a> from stm32g4xx_hal_spi.o(.text) referenced 4 times from stm32g4xx_hal_spi.o(.text)
 <LI><a href="#[92]">SPI_AbortTx_ISR</a> from stm32g4xx_hal_spi.o(.text) referenced 4 times from stm32g4xx_hal_spi.o(.text)
 <LI><a href="#[96]">SPI_DMAAbortOnError</a> from stm32g4xx_hal_spi.o(.text) referenced 4 times from stm32g4xx_hal_spi.o(.text)
 <LI><a href="#[8d]">SPI_DMAError</a> from stm32g4xx_hal_spi.o(.text) referenced 6 times from stm32g4xx_hal_spi.o(.text)
 <LI><a href="#[8e]">SPI_DMAHalfReceiveCplt</a> from stm32g4xx_hal_spi.o(.text) referenced 4 times from stm32g4xx_hal_spi.o(.text)
 <LI><a href="#[8b]">SPI_DMAHalfTransmitCplt</a> from stm32g4xx_hal_spi.o(.text) referenced 2 times from stm32g4xx_hal_spi.o(.text)
 <LI><a href="#[90]">SPI_DMAHalfTransmitReceiveCplt</a> from stm32g4xx_hal_spi.o(.text) referenced 2 times from stm32g4xx_hal_spi.o(.text)
 <LI><a href="#[8f]">SPI_DMAReceiveCplt</a> from stm32g4xx_hal_spi.o(.text) referenced 4 times from stm32g4xx_hal_spi.o(.text)
 <LI><a href="#[95]">SPI_DMARxAbortCallback</a> from stm32g4xx_hal_spi.o(.text) referenced 2 times from stm32g4xx_hal_spi.o(.text)
 <LI><a href="#[8c]">SPI_DMATransmitCplt</a> from stm32g4xx_hal_spi.o(.text) referenced 2 times from stm32g4xx_hal_spi.o(.text)
 <LI><a href="#[91]">SPI_DMATransmitReceiveCplt</a> from stm32g4xx_hal_spi.o(.text) referenced 2 times from stm32g4xx_hal_spi.o(.text)
 <LI><a href="#[94]">SPI_DMATxAbortCallback</a> from stm32g4xx_hal_spi.o(.text) referenced 2 times from stm32g4xx_hal_spi.o(.text)
 <LI><a href="#[85]">SPI_RxISR_16BIT</a> from stm32g4xx_hal_spi.o(.text) referenced 2 times from stm32g4xx_hal_spi.o(.text)
 <LI><a href="#[86]">SPI_RxISR_8BIT</a> from stm32g4xx_hal_spi.o(.text) referenced 2 times from stm32g4xx_hal_spi.o(.text)
 <LI><a href="#[83]">SPI_TxISR_16BIT</a> from stm32g4xx_hal_spi.o(.text) referenced 2 times from stm32g4xx_hal_spi.o(.text)
 <LI><a href="#[84]">SPI_TxISR_8BIT</a> from stm32g4xx_hal_spi.o(.text) referenced 2 times from stm32g4xx_hal_spi.o(.text)
 <LI><a href="#[6]">SVC_Handler</a> from stm32g4xx_it.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32g4xx_it.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[b6]">SystemInit</a> from system_stm32g4xx.o(.text) referenced from startup_stm32g474xx.o(.text)
 <LI><a href="#[22]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[57]">TIM20_BRK_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[5a]">TIM20_CC_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[59]">TIM20_TRG_COM_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[58]">TIM20_UP_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32g4xx_it.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from stm32g4xx_it.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from stm32g4xx_it.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[41]">TIM7_DAC_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[9e]">TIMEx_DMACommutationCplt</a> from stm32g4xx_hal_tim_ex.o(.text) referenced 6 times from stm32g4xx_hal_tim.o(.text)
 <LI><a href="#[9f]">TIMEx_DMACommutationHalfCplt</a> from stm32g4xx_hal_tim_ex.o(.text) referenced 6 times from stm32g4xx_hal_tim.o(.text)
 <LI><a href="#[9c]">TIM_DMACaptureCplt</a> from stm32g4xx_hal_tim.o(.text) referenced 26 times from stm32g4xx_hal_tim.o(.text)
 <LI><a href="#[9d]">TIM_DMACaptureHalfCplt</a> from stm32g4xx_hal_tim.o(.text) referenced 26 times from stm32g4xx_hal_tim.o(.text)
 <LI><a href="#[9a]">TIM_DMADelayPulseCplt</a> from stm32g4xx_hal_tim.o(.text) referenced 24 times from stm32g4xx_hal_tim.o(.text)
 <LI><a href="#[9b]">TIM_DMADelayPulseHalfCplt</a> from stm32g4xx_hal_tim.o(.text) referenced 40 times from stm32g4xx_hal_tim.o(.text)
 <LI><a href="#[a2]">TIM_DMADelayPulseNCplt</a> from stm32g4xx_hal_tim_ex.o(.text) referenced 16 times from stm32g4xx_hal_tim_ex.o(.text)
 <LI><a href="#[99]">TIM_DMAError</a> from stm32g4xx_hal_tim.o(.text) referenced 66 times from stm32g4xx_hal_tim.o(.text)
 <LI><a href="#[a3]">TIM_DMAErrorCCxN</a> from stm32g4xx_hal_tim_ex.o(.text) referenced 16 times from stm32g4xx_hal_tim_ex.o(.text)
 <LI><a href="#[97]">TIM_DMAPeriodElapsedCplt</a> from stm32g4xx_hal_tim.o(.text) referenced 6 times from stm32g4xx_hal_tim.o(.text)
 <LI><a href="#[98]">TIM_DMAPeriodElapsedHalfCplt</a> from stm32g4xx_hal_tim.o(.text) referenced 6 times from stm32g4xx_hal_tim.o(.text)
 <LI><a href="#[a0]">TIM_DMATriggerCplt</a> from stm32g4xx_hal_tim.o(.text) referenced 4 times from stm32g4xx_hal_tim.o(.text)
 <LI><a href="#[a1]">TIM_DMATriggerHalfCplt</a> from stm32g4xx_hal_tim.o(.text) referenced 4 times from stm32g4xx_hal_tim.o(.text)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[b5]">UART_DMAAbortOnError</a> from stm32g4xx_hal_uart.o(.text) referenced 2 times from stm32g4xx_hal_uart.o(.text)
 <LI><a href="#[ae]">UART_DMAError</a> from stm32g4xx_hal_uart.o(.text) referenced 4 times from stm32g4xx_hal_uart.o(.text)
 <LI><a href="#[af]">UART_DMAReceiveCplt</a> from stm32g4xx_hal_uart.o(.text) referenced 2 times from stm32g4xx_hal_uart.o(.text)
 <LI><a href="#[b2]">UART_DMARxAbortCallback</a> from stm32g4xx_hal_uart.o(.text) referenced 2 times from stm32g4xx_hal_uart.o(.text)
 <LI><a href="#[b0]">UART_DMARxHalfCplt</a> from stm32g4xx_hal_uart.o(.text) referenced 2 times from stm32g4xx_hal_uart.o(.text)
 <LI><a href="#[b4]">UART_DMARxOnlyAbortCallback</a> from stm32g4xx_hal_uart.o(.text) referenced 2 times from stm32g4xx_hal_uart.o(.text)
 <LI><a href="#[ac]">UART_DMATransmitCplt</a> from stm32g4xx_hal_uart.o(.text) referenced 2 times from stm32g4xx_hal_uart.o(.text)
 <LI><a href="#[b1]">UART_DMATxAbortCallback</a> from stm32g4xx_hal_uart.o(.text) referenced 2 times from stm32g4xx_hal_uart.o(.text)
 <LI><a href="#[ad]">UART_DMATxHalfCplt</a> from stm32g4xx_hal_uart.o(.text) referenced 2 times from stm32g4xx_hal_uart.o(.text)
 <LI><a href="#[b3]">UART_DMATxOnlyAbortCallback</a> from stm32g4xx_hal_uart.o(.text) referenced 2 times from stm32g4xx_hal_uart.o(.text)
 <LI><a href="#[aa]">UART_RxISR_16BIT</a> from stm32g4xx_hal_uart.o(.text) referenced 4 times from stm32g4xx_hal_uart.o(.text)
 <LI><a href="#[a8]">UART_RxISR_16BIT_FIFOEN</a> from stm32g4xx_hal_uart.o(.text) referenced 2 times from stm32g4xx_hal_uart.o(.text)
 <LI><a href="#[ab]">UART_RxISR_8BIT</a> from stm32g4xx_hal_uart.o(.text) referenced 4 times from stm32g4xx_hal_uart.o(.text)
 <LI><a href="#[a9]">UART_RxISR_8BIT_FIFOEN</a> from stm32g4xx_hal_uart.o(.text) referenced 2 times from stm32g4xx_hal_uart.o(.text)
 <LI><a href="#[a6]">UART_TxISR_16BIT</a> from stm32g4xx_hal_uart.o(.text) referenced 2 times from stm32g4xx_hal_uart.o(.text)
 <LI><a href="#[a4]">UART_TxISR_16BIT_FIFOEN</a> from stm32g4xx_hal_uart.o(.text) referenced 2 times from stm32g4xx_hal_uart.o(.text)
 <LI><a href="#[a7]">UART_TxISR_8BIT</a> from stm32g4xx_hal_uart.o(.text) referenced 2 times from stm32g4xx_hal_uart.o(.text)
 <LI><a href="#[a5]">UART_TxISR_8BIT_FIFOEN</a> from stm32g4xx_hal_uart.o(.text) referenced 2 times from stm32g4xx_hal_uart.o(.text)
 <LI><a href="#[49]">UCPD1_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32g4xx_it.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[1d]">USB_HP_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[1e]">USB_LP_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32g4xx_it.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32g474xx.o(.text) referenced from startup_stm32g474xx.o(RESET)
 <LI><a href="#[b7]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32g474xx.o(.text)
 <LI><a href="#[b8]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[b9]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[6f]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b7]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(.text)
</UL>
<P><STRONG><a name="[399]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[ba]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[381]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[39a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[39b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[39c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[39d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[39e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[14d]"></a>Key_Init</STRONG> (Thumb, 110 bytes, Stack size 4 bytes, Key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Key_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15c]"></a>KEY_Scan</STRONG> (Thumb, 364 bytes, Stack size 8 bytes, Key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KEY_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[c0]"></a>OLED_GPIO_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, OLED.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[39f]"></a>OLED_I2C_Start</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, OLED.o(.text), UNUSED)

<P><STRONG><a name="[3a0]"></a>OLED_I2C_Stop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, OLED.o(.text), UNUSED)

<P><STRONG><a name="[3a1]"></a>OLED_I2C_SendByte</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, OLED.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>OLED_WriteCommand</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, OLED.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = OLED_WriteCommand &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetCursor
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[be]"></a>OLED_WriteData</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, OLED.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = OLED_WriteData &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UpdateArea
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Update
</UL>

<P><STRONG><a name="[bf]"></a>OLED_Init</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, OLED.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = OLED_Init &rArr; OLED_Update &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Update
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>OLED_Clear</STRONG> (Thumb, 94 bytes, Stack size 4 bytes, OLED.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = OLED_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[c2]"></a>OLED_Update</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, OLED.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = OLED_Update &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetCursor
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[c3]"></a>OLED_SetCursor</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, OLED.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = OLED_SetCursor &rArr; OLED_WriteCommand &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UpdateArea
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Update
</UL>

<P><STRONG><a name="[d0]"></a>OLED_Pow</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, OLED.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OLED_Pow
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowFloatNum
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowBinNum
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowHexNum
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowSignedNum
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>

<P><STRONG><a name="[e2]"></a>OLED_pnpoly</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, OLED.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawTriangle
</UL>

<P><STRONG><a name="[c4]"></a>OLED_IsInAngle</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, OLED.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawArc
</UL>

<P><STRONG><a name="[ca]"></a>OLED_UpdateArea</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, OLED.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetCursor
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
</UL>

<P><STRONG><a name="[cd]"></a>OLED_ClearArea</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, OLED.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_ClearArea
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowImage
</UL>

<P><STRONG><a name="[3a2]"></a>OLED_Reverse</STRONG> (Thumb, 96 bytes, Stack size 4 bytes, OLED.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>OLED_ReverseArea</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, OLED.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_ReverseArea
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display
</UL>

<P><STRONG><a name="[cb]"></a>OLED_ShowChar</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, OLED.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_ShowChar &rArr; OLED_ShowImage &rArr; OLED_ClearArea
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowImage
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowFloatNum
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowBinNum
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowHexNum
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowSignedNum
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>

<P><STRONG><a name="[cc]"></a>OLED_ShowImage</STRONG> (Thumb, 346 bytes, Stack size 16 bytes, OLED.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLED_ShowImage &rArr; OLED_ClearArea
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ClearArea
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>

<P><STRONG><a name="[ce]"></a>OLED_ShowString</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, OLED.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_ShowImage &rArr; OLED_ClearArea
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Printf
</UL>

<P><STRONG><a name="[cf]"></a>OLED_ShowNum</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, OLED.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_ShowImage &rArr; OLED_ClearArea
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Pow
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowFloatNum
</UL>

<P><STRONG><a name="[d1]"></a>OLED_ShowSignedNum</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, OLED.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Pow
</UL>

<P><STRONG><a name="[d2]"></a>OLED_ShowHexNum</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, OLED.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Pow
</UL>

<P><STRONG><a name="[d3]"></a>OLED_ShowBinNum</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, OLED.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Pow
</UL>

<P><STRONG><a name="[d4]"></a>OLED_ShowFloatNum</STRONG> (Thumb, 352 bytes, Stack size 64 bytes, OLED.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Pow
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[da]"></a>OLED_ShowChinese</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, OLED.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_ShowChinese &rArr; OLED_ShowImage &rArr; OLED_ClearArea
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowImage
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display
</UL>

<P><STRONG><a name="[dc]"></a>OLED_Printf</STRONG> (Thumb, 58 bytes, Stack size 56 bytes, OLED.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OLED_Printf &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_ShowImage &rArr; OLED_ClearArea
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display
</UL>

<P><STRONG><a name="[df]"></a>OLED_DrawPoint</STRONG> (Thumb, 82 bytes, Stack size 4 bytes, OLED.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawArc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawEllipse
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawCircle
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawTriangle
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawRectangle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawLine
</UL>

<P><STRONG><a name="[3a3]"></a>OLED_GetPoint</STRONG> (Thumb, 112 bytes, Stack size 4 bytes, OLED.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>OLED_DrawLine</STRONG> (Thumb, 838 bytes, Stack size 40 bytes, OLED.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawTriangle
</UL>

<P><STRONG><a name="[e0]"></a>OLED_DrawRectangle</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, OLED.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
</UL>

<P><STRONG><a name="[e1]"></a>OLED_DrawTriangle</STRONG> (Thumb, 510 bytes, Stack size 48 bytes, OLED.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawLine
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_pnpoly
</UL>

<P><STRONG><a name="[e3]"></a>OLED_DrawCircle</STRONG> (Thumb, 758 bytes, Stack size 24 bytes, OLED.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OLED_DrawCircle &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display
</UL>

<P><STRONG><a name="[e4]"></a>OLED_DrawEllipse</STRONG> (Thumb, 1464 bytes, Stack size 120 bytes, OLED.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[e8]"></a>OLED_DrawArc</STRONG> (Thumb, 1272 bytes, Stack size 32 bytes, OLED.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_IsInAngle
</UL>

<P><STRONG><a name="[e9]"></a>W25Q64_SPIStart</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, W25Q64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = W25Q64_SPIStart &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_ReadData
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_SectorErase
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_PageProgram
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_WaitBusy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_WriteEnable
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_ReadID
</UL>

<P><STRONG><a name="[eb]"></a>W25Q64_SPIStop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, W25Q64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = W25Q64_SPIStop &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_ReadData
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_SectorErase
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_PageProgram
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_WaitBusy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_WriteEnable
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_ReadID
</UL>

<P><STRONG><a name="[ec]"></a>MySPI_SwapByte</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, W25Q64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MySPI_SwapByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_ReadData
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_SectorErase
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_PageProgram
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_WaitBusy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_WriteEnable
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_ReadID
</UL>

<P><STRONG><a name="[ee]"></a>W25Q64_ReadID</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, W25Q64.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MySPI_SwapByte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_SPIStop
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_SPIStart
</UL>

<P><STRONG><a name="[ef]"></a>W25Q64_WriteEnable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, W25Q64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = W25Q64_WriteEnable &rArr; MySPI_SwapByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MySPI_SwapByte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_SPIStop
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_SPIStart
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_SectorErase
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_PageProgram
</UL>

<P><STRONG><a name="[f0]"></a>W25Q64_WaitBusy</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, W25Q64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = W25Q64_WaitBusy &rArr; MySPI_SwapByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MySPI_SwapByte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_SPIStop
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_SPIStart
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_ReadData
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_SectorErase
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_PageProgram
</UL>

<P><STRONG><a name="[f1]"></a>W25Q64_PageProgram</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, W25Q64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = W25Q64_PageProgram &rArr; W25Q64_WaitBusy &rArr; MySPI_SwapByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_WaitBusy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_WriteEnable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MySPI_SwapByte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_SPIStop
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_SPIStart
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Flash
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Flash
</UL>

<P><STRONG><a name="[f2]"></a>W25Q64_SectorErase</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, W25Q64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = W25Q64_SectorErase &rArr; W25Q64_WaitBusy &rArr; MySPI_SwapByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_WaitBusy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_WriteEnable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MySPI_SwapByte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_SPIStop
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_SPIStart
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Flash
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Flash
</UL>

<P><STRONG><a name="[f3]"></a>W25Q64_ReadData</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, W25Q64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = W25Q64_ReadData &rArr; W25Q64_WaitBusy &rArr; MySPI_SwapByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_WaitBusy
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MySPI_SwapByte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_SPIStop
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_SPIStart
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flash
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Flash
</UL>

<P><STRONG><a name="[14e]"></a>PID_Init</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, PID.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>MX_ADC1_Init</STRONG> (Thumb, 318 bytes, Stack size 64 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_ConfigChannel &rArr; LL_ADC_SetOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_MultiModeConfigChannel
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>MX_ADC2_Init</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = MX_ADC2_Init &rArr; HAL_ADC_ConfigChannel &rArr; LL_ADC_SetOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>MX_ADC5_Init</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = MX_ADC5_Init &rArr; HAL_ADC_ConfigChannel &rArr; LL_ADC_SetOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 504 bytes, Stack size 144 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[100]"></a>HAL_ADC_MspDeInit</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
</UL>

<P><STRONG><a name="[103]"></a>MX_DMA_Init</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20c]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>Key_Process</STRONG> (Thumb, 618 bytes, Stack size 24 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Key_Process &rArr; USART1_Printf &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_WaveformOutputStop
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[109]"></a>Encoder</STRONG> (Thumb, 6264 bytes, Stack size 152 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Encoder &rArr; USART1_Printf &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Printf
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10e]"></a>OLED_Display</STRONG> (Thumb, 3658 bytes, Stack size 320 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = OLED_Display &rArr; OLED_Update &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawCircle
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Printf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ReverseArea
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Update
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[110]"></a>ADC_calculate</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ADC_calculate &rArr; GET_NTC_Temperature &rArr; calculateTemperature &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_CPU_Temperature
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_NTC_Temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>GET_NTC_Temperature</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = GET_NTC_Temperature &rArr; calculateTemperature &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateTemperature
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_FAN
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_calculate
</UL>

<P><STRONG><a name="[112]"></a>GET_CPU_Temperature</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = GET_CPU_Temperature &rArr; HAL_ADC_Start &rArr; ADC_Enable &rArr; LL_ADC_GetCommonPathInternalCh
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;one_order_lowpass_filter
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_calculate
</UL>

<P><STRONG><a name="[117]"></a>StateMInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = StateMInit &rArr; ValInit &rArr; HAL_HRTIM_WaveformOutputStop
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateM
</UL>

<P><STRONG><a name="[382]"></a>StateMWait</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateM
</UL>

<P><STRONG><a name="[119]"></a>StateMRise</STRONG> (Thumb, 692 bytes, Stack size 24 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = StateMRise &rArr; HAL_HRTIM_WaveformOutputStart
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_WaveformOutputStart
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_WaveformOutputStop
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateM
</UL>

<P><STRONG><a name="[383]"></a>StateMRun</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateM
</UL>

<P><STRONG><a name="[11b]"></a>StateMErr</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = StateMErr &rArr; HAL_HRTIM_WaveformOutputStop
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_WaveformOutputStop
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateM
</UL>

<P><STRONG><a name="[118]"></a>ValInit</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ValInit &rArr; HAL_HRTIM_WaveformOutputStop
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_WaveformOutputStop
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMInit
</UL>

<P><STRONG><a name="[11c]"></a>ShortOff</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ShortOff &rArr; HAL_HRTIM_WaveformOutputStart
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_WaveformOutputStart
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[11d]"></a>OVP</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OVP &rArr; HAL_HRTIM_WaveformOutputStop
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_WaveformOutputStop
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[11e]"></a>OCP</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OCP &rArr; HAL_HRTIM_WaveformOutputStop
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_WaveformOutputStop
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[11f]"></a>OTP</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = OTP &rArr; GET_NTC_Temperature &rArr; calculateTemperature &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_NTC_Temperature
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_WaveformOutputStop
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[120]"></a>BUZZER_Short</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BUZZER_Short &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>BUZZER_Middle</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BUZZER_Middle &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>one_order_lowpass_filter</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = one_order_lowpass_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_CPU_Temperature
</UL>

<P><STRONG><a name="[115]"></a>calculateTemperature</STRONG> (Thumb, 264 bytes, Stack size 64 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = calculateTemperature &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_NTC_Temperature
</UL>

<P><STRONG><a name="[129]"></a>FAN_PWM_set</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FAN_PWM_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_FAN
</UL>

<P><STRONG><a name="[123]"></a>Init_Flash</STRONG> (Thumb, 260 bytes, Stack size 64 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Init_Flash &rArr; W25Q64_ReadData &rArr; W25Q64_WaitBusy &rArr; MySPI_SwapByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_bytes
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_ReadData
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_SectorErase
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_PageProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[124]"></a>float_to_bytes</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = float_to_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Flash
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Flash
</UL>

<P><STRONG><a name="[125]"></a>Update_Flash</STRONG> (Thumb, 280 bytes, Stack size 64 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Update_Flash &rArr; W25Q64_PageProgram &rArr; W25Q64_WaitBusy &rArr; MySPI_SwapByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_bytes
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_SectorErase
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_PageProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[126]"></a>Read_Flash</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Read_Flash &rArr; W25Q64_ReadData &rArr; W25Q64_WaitBusy &rArr; MySPI_SwapByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytes_to_float
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>bytes_to_float</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bytes_to_float
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flash
</UL>

<P><STRONG><a name="[128]"></a>Auto_FAN</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Auto_FAN &rArr; GET_NTC_Temperature &rArr; calculateTemperature &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAN_PWM_set
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_NTC_Temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>MX_GPIO_Init</STRONG> (Thumb, 394 bytes, Stack size 88 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_GPIO_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12b]"></a>MX_HRTIM1_Init</STRONG> (Thumb, 838 bytes, Stack size 248 bytes, hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = MX_HRTIM1_Init &rArr; HAL_HRTIM_Init &rArr; HAL_HRTIM_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_MspPostInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_WaveformOutputConfig
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_DeadTimeConfig
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_WaveformCompareConfig
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_WaveformTimerConfig
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_WaveformTimerControl
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_TimeBaseConfig
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_ADCPostScalerConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_ADCTriggerConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_PollForDLLCalibration
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_DLLCalibrationStart
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>HAL_HRTIM_MspPostInit</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HAL_HRTIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_HRTIM1_Init
</UL>

<P><STRONG><a name="[138]"></a>HAL_HRTIM_MspInit</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_HRTIM_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Init
</UL>

<P><STRONG><a name="[139]"></a>HAL_HRTIM_MspDeInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hrtim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_DeInit
</UL>

<P><STRONG><a name="[13b]"></a>MX_I2C3_Init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = MX_I2C3_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13f]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 244 bytes, Stack size 144 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[140]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[141]"></a>MX_IWDG_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, iwdg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_IWDG_Init &rArr; HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>main</STRONG> (Thumb, 1000 bytes, Stack size 144 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = main &rArr; OLED_Display &rArr; OLED_Update &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_WaveformCountStart
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_HRTIM1_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_FAN
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flash
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Flash
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Flash
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAN_PWM_set
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_Middle
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_Short
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_calculate
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Printf
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC5_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Update
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[144]"></a>SystemClock_Config</STRONG> (Thumb, 124 bytes, Stack size 88 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_EnableCSS
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>Error_Handler</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_HRTIM1_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC5_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[158]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; OTP &rArr; GET_NTC_Temperature &rArr; calculateTemperature &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBMode
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OCP
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OVP
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortOff
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateM
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSample
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Process
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMAPeriodElapsedCplt
</UL>

<P><STRONG><a name="[14a]"></a>MX_SPI3_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = MX_SPI3_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15e]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[15f]"></a>HAL_SPI_MspDeInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
</UL>

<P><STRONG><a name="[160]"></a>HAL_MspInit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32g4xx_hal_msp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_DisableUCPDDeadBattery
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NMI_Handler &rArr; HAL_RCC_NMI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_NMI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32g4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32g4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32g4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Channel2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32g4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Channel3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32g4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; OTP &rArr; GET_NTC_Temperature &rArr; calculateTemperature &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32g4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; OTP &rArr; GET_NTC_Temperature &rArr; calculateTemperature &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32g4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = TIM4_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; OTP &rArr; GET_NTC_Temperature &rArr; calculateTemperature &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32g4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32g4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HRTIM1_TIMD_IRQHandler &rArr; HAL_HRTIM_IRQHandler &rArr; HRTIM_Master_ISR &rArr; HAL_HRTIM_RepetitionEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_IRQHandler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuckBoostVILoopCtlPID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_stm32g4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(.text)
</UL>
<P><STRONG><a name="[3a4]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, system_stm32g4xx.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>MX_TIM2_Init</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[148]"></a>MX_TIM3_Init</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[149]"></a>MX_TIM4_Init</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[147]"></a>MX_TIM8_Init</STRONG> (Thumb, 310 bytes, Stack size 128 bytes, tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = MX_TIM8_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[170]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
</UL>

<P><STRONG><a name="[171]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[172]"></a>HAL_TIM_Base_MspDeInit</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_DeInit
</UL>

<P><STRONG><a name="[146]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[177]"></a>HAL_UART_MspInit</STRONG> (Thumb, 348 bytes, Stack size 144 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RS485Ex_Init
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_Init
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
</UL>

<P><STRONG><a name="[178]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[17a]"></a>calculateStringLength</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TX_DMA_String
</UL>

<P><STRONG><a name="[179]"></a>USART1_TX_DMA_String</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateStringLength
</UL>

<P><STRONG><a name="[107]"></a>USART1_Printf</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USART1_Printf &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Process
</UL>

<P><STRONG><a name="[352]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[143]"></a>HAL_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32g4xx_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17e]"></a>HAL_InitTick</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, stm32g4xx_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetTickFreq
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_DeInit
</UL>

<P><STRONG><a name="[180]"></a>HAL_DeInit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32g4xx_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspDeInit
</UL>

<P><STRONG><a name="[181]"></a>HAL_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DeInit
</UL>

<P><STRONG><a name="[163]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[183]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Receive
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Transmit
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_PollForTransfer
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_RegularMultiModeStop_DMA
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_MultiModeStop_DMA
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedPollForConversion
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForEvent
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCFG_EnableVREFBUF
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_PollForDLLCalibration
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ReArmBreakInput
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Abort
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMARxAbortCallback
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATxAbortCallback
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_AbortRx_ISR
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_AbortTx_ISR
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTx_ISR
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_CRSWaitSynchronization
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_DeInit
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
</UL>

<P><STRONG><a name="[3a5]"></a>HAL_GetTickPrio</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>HAL_SetTickFreq</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, stm32g4xx_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[3a6]"></a>HAL_GetTickFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>HAL_Delay</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32g4xx_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder
</UL>

<P><STRONG><a name="[3a7]"></a>HAL_SuspendTick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[3a8]"></a>HAL_ResumeTick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[3a9]"></a>HAL_GetHalVersion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[3aa]"></a>HAL_GetREVID</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[3ab]"></a>HAL_GetDEVID</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[3ac]"></a>HAL_GetUIDw0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[3ad]"></a>HAL_GetUIDw1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[3ae]"></a>HAL_GetUIDw2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[3af]"></a>HAL_DBGMCU_EnableDBGSleepMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[3b0]"></a>HAL_DBGMCU_DisableDBGSleepMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[3b1]"></a>HAL_DBGMCU_EnableDBGStopMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[3b2]"></a>HAL_DBGMCU_DisableDBGStopMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[3b3]"></a>HAL_DBGMCU_EnableDBGStandbyMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[3b4]"></a>HAL_DBGMCU_DisableDBGStandbyMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[3b5]"></a>HAL_SYSCFG_CCMSRAMErase</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[3b6]"></a>HAL_SYSCFG_EnableMemorySwappingBank</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[3b7]"></a>HAL_SYSCFG_DisableMemorySwappingBank</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[3b8]"></a>HAL_SYSCFG_VREFBUF_VoltageScalingConfig</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32g4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[3b9]"></a>HAL_SYSCFG_VREFBUF_HighImpedanceConfig</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32g4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[3ba]"></a>HAL_SYSCFG_VREFBUF_TrimmingConfig</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32g4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>HAL_SYSCFG_EnableVREFBUF</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32g4xx_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[3bb]"></a>HAL_SYSCFG_DisableVREFBUF</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[3bc]"></a>HAL_SYSCFG_EnableIOSwitchBooster</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[3bd]"></a>HAL_SYSCFG_DisableIOSwitchBooster</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[3be]"></a>HAL_SYSCFG_EnableIOSwitchVDD</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[3bf]"></a>HAL_SYSCFG_DisableIOSwitchVDD</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[3c0]"></a>HAL_SYSCFG_CCMSRAM_WriteProtectionEnable</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32g4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>HAL_ADC_Init</STRONG> (Thumb, 966 bytes, Stack size 64 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetCommonClock
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_EnableInternalRegulator
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsInternalRegulatorEnabled
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_DisableDeepPowerDown
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsDeepPowerDownEnabled
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC5_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[18d]"></a>HAL_ADC_DeInit</STRONG> (Thumb, 696 bytes, Stack size 48 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspDeInit
</UL>

<P><STRONG><a name="[18e]"></a>ADC_ConversionStop</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_StopConversion
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_StopConversion
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsDisableOngoing
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_RegularMultiModeStop_DMA
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_RegularStop_DMA
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_RegularStop_IT
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_RegularStop
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_MultiModeStop_DMA
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedStop_IT
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedStop
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop_DMA
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop_IT
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
</UL>

<P><STRONG><a name="[18f]"></a>ADC_Disable</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADC_Disable &rArr; LL_ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Disable
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsDisableOngoing
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_RegularMultiModeStop_DMA
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_RegularStop_DMA
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_RegularStop_IT
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_RegularStop
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_MultiModeStop_DMA
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedStop_IT
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedStop
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop_DMA
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop_IT
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[113]"></a>HAL_ADC_Start</STRONG> (Thumb, 602 bytes, Stack size 56 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_ADC_Start &rArr; ADC_Enable &rArr; LL_ADC_GetCommonPathInternalCh
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_StartConversion
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetMultimode
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_CPU_Temperature
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_NTC_Temperature
</UL>

<P><STRONG><a name="[195]"></a>ADC_Enable</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADC_Enable &rArr; LL_ADC_GetCommonPathInternalCh
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetCommonPathInternalCh
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Enable
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_MultiModeStart_DMA
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedStart_IT
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedStart
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_IT
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[199]"></a>HAL_ADC_Stop</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
</UL>

<P><STRONG><a name="[19a]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 680 bytes, Stack size 64 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsTriggerSourceSWStart
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetMultiDMATransfer
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetMultimode
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[19d]"></a>HAL_ADC_PollForEvent</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[19e]"></a>HAL_ADC_Start_IT</STRONG> (Thumb, 798 bytes, Stack size 56 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_StartConversion
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetMultimode
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
</UL>

<P><STRONG><a name="[19f]"></a>HAL_ADC_Stop_IT</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
</UL>

<P><STRONG><a name="[150]"></a>HAL_ADC_Start_DMA</STRONG> (Thumb, 496 bytes, Stack size 48 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_StartConversion
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetMultimode
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>ADC_DMAConvCplt</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_DMAConvCplt &rArr; HAL_ADC_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsTriggerSourceSWStart
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32g4xx_hal_adc.o(.text)
<LI> stm32g4xx_hal_adc_ex.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>ADC_DMAHalfConvCplt</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_DMAHalfConvCplt &rArr; HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32g4xx_hal_adc.o(.text)
<LI> stm32g4xx_hal_adc_ex.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>ADC_DMAError</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_DMAError &rArr; HAL_ADC_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32g4xx_hal_adc.o(.text)
<LI> stm32g4xx_hal_adc_ex.o(.text)
</UL>
<P><STRONG><a name="[1a4]"></a>HAL_ADC_Stop_DMA</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
</UL>

<P><STRONG><a name="[114]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_ADC_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_CPU_Temperature
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_NTC_Temperature
</UL>

<P><STRONG><a name="[3c1]"></a>HAL_ADC_StartSampling</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)

<P><STRONG><a name="[3c2]"></a>HAL_ADC_StopSampling</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>HAL_ADC_IRQHandler</STRONG> (Thumb, 1454 bytes, Stack size 88 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedQueueOverflowCallback
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_LevelOutOfWindow3Callback
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_LevelOutOfWindow2Callback
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_LevelOutOfWindowCallback
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConvCpltCallback
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_EndOfSamplingCallback
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsTriggerSourceSWStart
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsTriggerSourceSWStart
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetMultiDMATransfer
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetMultimode
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_ADC_ConvCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[1aa]"></a>HAL_ADC_LevelOutOfWindowCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_ADC_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAError
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_ADC_ConvHalfCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAHalfConvCplt
</UL>

<P><STRONG><a name="[f8]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 2276 bytes, Stack size 280 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; LL_ADC_SetOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetCommonPathInternalCh
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSingleDiff
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffsetState
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetOffsetChannel
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffsetSaturation
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffsetSign
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffset
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetSamplingTimeCommonConfig
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSamplingTime
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetSequencerRanks
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetCommonPathInternalCh
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC5_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[1b8]"></a>HAL_ADC_AnalogWDGConfig</STRONG> (Thumb, 1106 bytes, Stack size 80 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_ConfigAnalogWDThresholds
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_DisableIT_AWD3
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_EnableIT_AWD3
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_ClearFlag_AWD3
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_DisableIT_AWD2
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_EnableIT_AWD2
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_ClearFlag_AWD2
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_DisableIT_AWD1
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_EnableIT_AWD1
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_ClearFlag_AWD1
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetAnalogWDMonitChannels
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
</UL>

<P><STRONG><a name="[3c3]"></a>HAL_ADC_GetState</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)

<P><STRONG><a name="[3c4]"></a>HAL_ADC_GetError</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>HAL_ADCEx_Calibration_Start</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, stm32g4xx_hal_adc_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_ADCEx_Calibration_Start &rArr; ADC_Disable &rArr; LL_ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsCalibrationOnGoing
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_StartCalibration
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c6]"></a>HAL_ADCEx_Calibration_GetValue</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetCalibrationFactor
</UL>

<P><STRONG><a name="[1c8]"></a>HAL_ADCEx_Calibration_SetValue</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetCalibrationFactor
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
</UL>

<P><STRONG><a name="[1cd]"></a>HAL_ADCEx_InjectedStart</STRONG> (Thumb, 522 bytes, Stack size 48 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_StartConversion
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_GetTrigAuto
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetMultimode
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[1d1]"></a>HAL_ADCEx_InjectedStop</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
</UL>

<P><STRONG><a name="[1d2]"></a>HAL_ADCEx_InjectedPollForConversion</STRONG> (Thumb, 580 bytes, Stack size 72 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsTriggerSourceSWStart
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsTriggerSourceSWStart
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetMultimode
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[1d5]"></a>HAL_ADCEx_InjectedStart_IT</STRONG> (Thumb, 612 bytes, Stack size 48 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_StartConversion
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_GetTrigAuto
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetMultimode
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[1d6]"></a>HAL_ADCEx_InjectedStop_IT</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
</UL>

<P><STRONG><a name="[1d7]"></a>HAL_ADCEx_MultiModeStart_DMA</STRONG> (Thumb, 410 bytes, Stack size 152 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_StartConversion
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[1d9]"></a>HAL_ADCEx_MultiModeStop_DMA</STRONG> (Thumb, 434 bytes, Stack size 152 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[3c5]"></a>HAL_ADCEx_MultiModeGetValue</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)

<P><STRONG><a name="[3c6]"></a>HAL_ADCEx_InjectedGetValue</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>HAL_ADCEx_InjectedConvCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[1ad]"></a>HAL_ADCEx_InjectedQueueOverflowCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[1ab]"></a>HAL_ADCEx_LevelOutOfWindow2Callback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[1ac]"></a>HAL_ADCEx_LevelOutOfWindow3Callback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_ADCEx_EndOfSamplingCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[1da]"></a>HAL_ADCEx_RegularStop</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
</UL>

<P><STRONG><a name="[1db]"></a>HAL_ADCEx_RegularStop_IT</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
</UL>

<P><STRONG><a name="[1dc]"></a>HAL_ADCEx_RegularStop_DMA</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
</UL>

<P><STRONG><a name="[1dd]"></a>HAL_ADCEx_RegularMultiModeStop_DMA</STRONG> (Thumb, 458 bytes, Stack size 152 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[1de]"></a>HAL_ADCEx_InjectedConfigChannel</STRONG> (Thumb, 2730 bytes, Stack size 288 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetCommonPathInternalCh
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetCommonPathInternalCh
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSingleDiff
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffsetState
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetOffsetChannel
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffsetSaturation
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffsetSign
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffset
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetSamplingTimeCommonConfig
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSamplingTime
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
</UL>

<P><STRONG><a name="[f7]"></a>HAL_ADCEx_MultiModeConfigChannel</STRONG> (Thumb, 730 bytes, Stack size 192 bytes, stm32g4xx_hal_adc_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = HAL_ADCEx_MultiModeConfigChannel &rArr; LL_ADC_IsEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[1e9]"></a>HAL_ADCEx_EnableInjectedQueue</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
</UL>

<P><STRONG><a name="[1ea]"></a>HAL_ADCEx_DisableInjectedQueue</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_SetQueueMode
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
</UL>

<P><STRONG><a name="[1ec]"></a>HAL_ADCEx_DisableVoltageRegulator</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_DisableInternalRegulator
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
</UL>

<P><STRONG><a name="[1ee]"></a>HAL_ADCEx_EnterADCDeepPowerDownMode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_EnableDeepPowerDown
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
</UL>

<P><STRONG><a name="[17d]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32g4xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_NVIC_SetPriorityGrouping &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[104]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, stm32g4xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_MspInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[105]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32g4xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_NVIC_EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_MspInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[13a]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32g4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspDeInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_MspDeInit
</UL>

<P><STRONG><a name="[1f6]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>

<P><STRONG><a name="[17f]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32g4xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1f9]"></a>HAL_NVIC_GetPriorityGrouping</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32g4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>

<P><STRONG><a name="[1fa]"></a>HAL_NVIC_GetPriority</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, stm32g4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DecodePriority
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriority
</UL>

<P><STRONG><a name="[1fd]"></a>HAL_NVIC_SetPendingIRQ</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32g4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPendingIRQ
</UL>

<P><STRONG><a name="[1ff]"></a>HAL_NVIC_GetPendingIRQ</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32g4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPendingIRQ
</UL>

<P><STRONG><a name="[201]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32g4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>

<P><STRONG><a name="[203]"></a>HAL_NVIC_GetActive</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32g4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetActive
</UL>

<P><STRONG><a name="[3c7]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, stm32g4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32g4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>

<P><STRONG><a name="[206]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[3c8]"></a>HAL_MPU_Enable</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32g4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[3c9]"></a>HAL_MPU_Disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[3ca]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, stm32g4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>HAL_DMA_Init</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, stm32g4xx_hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXRequestGenBaseAndMask
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[102]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, stm32g4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXRequestGenBaseAndMask
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspDeInit
</UL>

<P><STRONG><a name="[209]"></a>HAL_DMA_Start</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, stm32g4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, stm32g4xx_hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write_DMA
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Receive_DMA
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Transmit_DMA
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive_DMA
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit_DMA
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAMasterReceiveCplt
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAMasterTransmitCplt
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_BurstDMATransfer
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_WaveformCountStart_DMA
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SimpleCaptureStart_DMA
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SimplePWMStart_DMA
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SimpleOCStart_DMA
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SimpleBaseStart_DMA
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_MultiModeStart_DMA
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start_DMA
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Start_DMA
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Start_DMA
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_DMABurst_MultiReadStart
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_DMABurst_MultiWriteStart
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start_DMA
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_DMA
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_DMA
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_DMA
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_DMA
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Seq_Receive_DMA
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Seq_Transmit_DMA
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Seq_Receive_DMA
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Seq_Transmit_DMA
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read_DMA
</UL>

<P><STRONG><a name="[1a5]"></a>HAL_DMA_Abort</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, stm32g4xx_hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_WaveformCountStop_DMA
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SimpleCaptureStop_DMA
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SimplePWMStop_DMA
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SimpleOCStop_DMA
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SimpleBaseStop_DMA
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_RegularMultiModeStop_DMA
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_RegularStop_DMA
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_MultiModeStop_DMA
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop_DMA
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Abort
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DMAStop
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Abort
</UL>

<P><STRONG><a name="[278]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32g4xx_hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive_IT
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit_IT
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Abort_IT
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Stop_DMA
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Stop_DMA
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Stop_DMA
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_DMABurst_ReadStop
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_DMABurst_WriteStop
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Stop_DMA
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop_DMA
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop_DMA
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop_DMA
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_DMA
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Abort_IT
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Seq_Receive_DMA
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Seq_Receive_IT
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Seq_Transmit_DMA
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Seq_Transmit_IT
</UL>

<P><STRONG><a name="[20b]"></a>HAL_DMA_PollForTransfer</STRONG> (Thumb, 422 bytes, Stack size 32 bytes, stm32g4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[165]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, stm32g4xx_hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[3cb]"></a>HAL_DMA_RegisterCallback</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, stm32g4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[3cc]"></a>HAL_DMA_UnRegisterCallback</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, stm32g4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[281]"></a>HAL_DMA_GetState</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32g4xx_hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_DMA_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>

<P><STRONG><a name="[359]"></a>HAL_DMA_GetError</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32g4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Abort
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>

<P><STRONG><a name="[fe]"></a>HAL_GPIO_Init</STRONG> (Thumb, 872 bytes, Stack size 44 bytes, stm32g4xx_hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_MspPostInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_EnableLSCO
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_MCOConfig
</UL>

<P><STRONG><a name="[101]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 472 bytes, Stack size 44 bytes, stm32g4xx_hal_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspDeInit
</UL>

<P><STRONG><a name="[10b]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32g4xx_hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder
</UL>

<P><STRONG><a name="[ea]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32g4xx_hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_Middle
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_Short
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMErr
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_SPIStop
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_SPIStart
</UL>

<P><STRONG><a name="[152]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32g4xx_hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3cd]"></a>HAL_GPIO_LockPin</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32g4xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32g4xx_hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[12c]"></a>HAL_HRTIM_Init</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_HRTIM_Init &rArr; HAL_HRTIM_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_HRTIM1_Init
</UL>

<P><STRONG><a name="[20d]"></a>HAL_HRTIM_DeInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_MspDeInit
</UL>

<P><STRONG><a name="[12d]"></a>HAL_HRTIM_DLLCalibrationStart</STRONG> (Thumb, 166 bytes, Stack size 12 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_HRTIM_DLLCalibrationStart
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_HRTIM1_Init
</UL>

<P><STRONG><a name="[3ce]"></a>HAL_HRTIM_DLLCalibrationStart_IT</STRONG> (Thumb, 182 bytes, Stack size 12 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>HAL_HRTIM_PollForDLLCalibration</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_HRTIM_PollForDLLCalibration
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_HRTIM1_Init
</UL>

<P><STRONG><a name="[131]"></a>HAL_HRTIM_TimeBaseConfig</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_HRTIM_TimeBaseConfig &rArr; HRTIM_TimingUnitBase_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_TimingUnitBase_Config
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_MasterBase_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_HRTIM1_Init
</UL>

<P><STRONG><a name="[3cf]"></a>HAL_HRTIM_SimpleBaseStart</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3d0]"></a>HAL_HRTIM_SimpleBaseStop</STRONG> (Thumb, 452 bytes, Stack size 12 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3d1]"></a>HAL_HRTIM_SimpleBaseStart_IT</STRONG> (Thumb, 148 bytes, Stack size 12 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3d2]"></a>HAL_HRTIM_SimpleBaseStop_IT</STRONG> (Thumb, 498 bytes, Stack size 12 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>HAL_HRTIM_SimpleBaseStart_DMA</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_GetDMAHandleFromTimerIdx
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[223]"></a>HAL_HRTIM_SimpleBaseStop_DMA</STRONG> (Thumb, 590 bytes, Stack size 24 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_GetDMAHandleFromTimerIdx
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[224]"></a>HAL_HRTIM_SimpleOCChannelConfig</STRONG> (Thumb, 494 bytes, Stack size 72 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_OutputConfig
</UL>

<P><STRONG><a name="[3d3]"></a>HAL_HRTIM_SimpleOCStart</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3d4]"></a>HAL_HRTIM_SimpleOCStop</STRONG> (Thumb, 470 bytes, Stack size 16 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>HAL_HRTIM_SimpleOCStart_IT</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_GetITFromOCMode
</UL>

<P><STRONG><a name="[228]"></a>HAL_HRTIM_SimpleOCStop_IT</STRONG> (Thumb, 506 bytes, Stack size 32 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_GetITFromOCMode
</UL>

<P><STRONG><a name="[229]"></a>HAL_HRTIM_SimpleOCStart_DMA</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_GetDMAFromOCMode
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_GetDMAHandleFromTimerIdx
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[22b]"></a>HAL_HRTIM_SimpleOCStop_DMA</STRONG> (Thumb, 548 bytes, Stack size 32 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_GetDMAFromOCMode
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_GetDMAHandleFromTimerIdx
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[22c]"></a>HAL_HRTIM_SimplePWMChannelConfig</STRONG> (Thumb, 388 bytes, Stack size 72 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_OutputConfig
</UL>

<P><STRONG><a name="[3d5]"></a>HAL_HRTIM_SimplePWMStart</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3d6]"></a>HAL_HRTIM_SimplePWMStop</STRONG> (Thumb, 470 bytes, Stack size 16 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3d7]"></a>HAL_HRTIM_SimplePWMStart_IT</STRONG> (Thumb, 314 bytes, Stack size 20 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3d8]"></a>HAL_HRTIM_SimplePWMStop_IT</STRONG> (Thumb, 664 bytes, Stack size 20 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[22d]"></a>HAL_HRTIM_SimplePWMStart_DMA</STRONG> (Thumb, 492 bytes, Stack size 40 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_GetDMAHandleFromTimerIdx
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[22e]"></a>HAL_HRTIM_SimplePWMStop_DMA</STRONG> (Thumb, 708 bytes, Stack size 32 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_GetDMAHandleFromTimerIdx
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[22f]"></a>HAL_HRTIM_SimpleCaptureChannelConfig</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_CaptureUnitConfig
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_EventConfig
</UL>

<P><STRONG><a name="[3d9]"></a>HAL_HRTIM_SimpleCaptureStart</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3da]"></a>HAL_HRTIM_SimpleCaptureStop</STRONG> (Thumb, 602 bytes, Stack size 28 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3db]"></a>HAL_HRTIM_SimpleCaptureStart_IT</STRONG> (Thumb, 258 bytes, Stack size 20 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3dc]"></a>HAL_HRTIM_SimpleCaptureStop_IT</STRONG> (Thumb, 646 bytes, Stack size 28 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>HAL_HRTIM_SimpleCaptureStart_DMA</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_GetDMAHandleFromTimerIdx
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[233]"></a>HAL_HRTIM_SimpleCaptureStop_DMA</STRONG> (Thumb, 690 bytes, Stack size 40 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_GetDMAHandleFromTimerIdx
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[234]"></a>HAL_HRTIM_SimpleOnePulseChannelConfig</STRONG> (Thumb, 410 bytes, Stack size 88 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_TIM_ResetConfig
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_EventConfig
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_OutputConfig
</UL>

<P><STRONG><a name="[3dd]"></a>HAL_HRTIM_SimpleOnePulseStart</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3de]"></a>HAL_HRTIM_SimpleOnePulseStop</STRONG> (Thumb, 470 bytes, Stack size 16 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3df]"></a>HAL_HRTIM_SimpleOnePulseStart_IT</STRONG> (Thumb, 314 bytes, Stack size 20 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3e0]"></a>HAL_HRTIM_SimpleOnePulseStop_IT</STRONG> (Thumb, 664 bytes, Stack size 20 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3e1]"></a>HAL_HRTIM_BurstModeConfig</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>HAL_HRTIM_EventConfig</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_EventConfig
</UL>

<P><STRONG><a name="[3e2]"></a>HAL_HRTIM_EventPrescalerConfig</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3e3]"></a>HAL_HRTIM_FaultConfig</STRONG> (Thumb, 836 bytes, Stack size 36 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3e4]"></a>HAL_HRTIM_FaultPrescalerConfig</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3e5]"></a>HAL_HRTIM_FaultBlankingConfigAndEnable</STRONG> (Thumb, 394 bytes, Stack size 20 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3e6]"></a>HAL_HRTIM_FaultCounterConfig</STRONG> (Thumb, 406 bytes, Stack size 20 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3e7]"></a>HAL_HRTIM_FaultCounterReset</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3e8]"></a>HAL_HRTIM_FaultModeCtl</STRONG> (Thumb, 230 bytes, Stack size 12 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>HAL_HRTIM_ADCTriggerConfig</STRONG> (Thumb, 830 bytes, Stack size 28 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_HRTIM_ADCTriggerConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_HRTIM1_Init
</UL>

<P><STRONG><a name="[130]"></a>HAL_HRTIM_ADCPostScalerConfig</STRONG> (Thumb, 468 bytes, Stack size 20 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_HRTIM_ADCPostScalerConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_HRTIM1_Init
</UL>

<P><STRONG><a name="[237]"></a>HAL_HRTIM_RollOverModeConfig</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_TimingUnitRollOver_Config
</UL>

<P><STRONG><a name="[133]"></a>HAL_HRTIM_WaveformTimerConfig</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_HRTIM_WaveformTimerConfig &rArr; HRTIM_TimingUnitWaveform_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_ForceRegistersUpdate
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_TimingUnitWaveform_Config
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_MasterWaveform_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_HRTIM1_Init
</UL>

<P><STRONG><a name="[132]"></a>HAL_HRTIM_WaveformTimerControl</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_HRTIM_WaveformTimerControl &rArr; HRTIM_TimingUnitWaveform_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_TimingUnitWaveform_Control
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_ForceRegistersUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_HRTIM1_Init
</UL>

<P><STRONG><a name="[3e9]"></a>HAL_HRTIM_TimerDualChannelDacConfig</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3ea]"></a>HAL_HRTIM_TimerEventFilteringConfig</STRONG> (Thumb, 656 bytes, Stack size 24 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3eb]"></a>HAL_HRTIM_ExtEventCounterConfig</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3ec]"></a>HAL_HRTIM_ExtEventCounterEnable</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3ed]"></a>HAL_HRTIM_ExtEventCounterDisable</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3ee]"></a>HAL_HRTIM_ExtEventCounterReset</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>HAL_HRTIM_DeadTimeConfig</STRONG> (Thumb, 268 bytes, Stack size 20 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_HRTIM_DeadTimeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_HRTIM1_Init
</UL>

<P><STRONG><a name="[3ef]"></a>HAL_HRTIM_ChopperModeConfig</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3f0]"></a>HAL_HRTIM_BurstDMAConfig</STRONG> (Thumb, 244 bytes, Stack size 20 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>HAL_HRTIM_WaveformCompareConfig</STRONG> (Thumb, 692 bytes, Stack size 28 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_HRTIM_WaveformCompareConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_HRTIM1_Init
</UL>

<P><STRONG><a name="[3f1]"></a>HAL_HRTIM_WaveformCaptureConfig</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>HAL_HRTIM_WaveformOutputConfig</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_HRTIM_WaveformOutputConfig &rArr; HRTIM_OutputConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_OutputConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_HRTIM1_Init
</UL>

<P><STRONG><a name="[3f2]"></a>HAL_HRTIM_WaveformSetOutputLevel</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>HAL_HRTIM_WaveformOutputStart</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_HRTIM_WaveformOutputStart
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortOff
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMRise
</UL>

<P><STRONG><a name="[108]"></a>HAL_HRTIM_WaveformOutputStop</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_HRTIM_WaveformOutputStop
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OCP
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OVP
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMErr
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMRise
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Process
</UL>

<P><STRONG><a name="[151]"></a>HAL_HRTIM_WaveformCountStart</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_HRTIM_WaveformCountStart
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f3]"></a>HAL_HRTIM_WaveformCountStop</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3f4]"></a>HAL_HRTIM_WaveformCountStart_IT</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3f5]"></a>HAL_HRTIM_WaveformCountStop_IT</STRONG> (Thumb, 246 bytes, Stack size 20 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>HAL_HRTIM_WaveformCountStart_DMA</STRONG> (Thumb, 466 bytes, Stack size 32 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_GetDMAHandleFromTimerIdx
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[23e]"></a>HAL_HRTIM_WaveformCountStop_DMA</STRONG> (Thumb, 554 bytes, Stack size 24 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_GetDMAHandleFromTimerIdx
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[3f6]"></a>HAL_HRTIM_BurstModeCtl</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3f7]"></a>HAL_HRTIM_BurstModeSoftwareTrigger</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3f8]"></a>HAL_HRTIM_SoftwareCapture</STRONG> (Thumb, 204 bytes, Stack size 20 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3f9]"></a>HAL_HRTIM_SoftwareUpdate</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3fa]"></a>HAL_HRTIM_SwapTimerOutput</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3fb]"></a>HAL_HRTIM_SoftwareReset</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3fc]"></a>HAL_HRTIM_OutputSwapEnable</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3fd]"></a>HAL_HRTIM_OutputSwapDisable</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>HAL_HRTIM_BurstDMATransfer</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_GetDMAHandleFromTimerIdx
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[3fe]"></a>HAL_HRTIM_UpdateEnable</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[3ff]"></a>HAL_HRTIM_UpdateDisable</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[400]"></a>HAL_HRTIM_GetState</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[401]"></a>HAL_HRTIM_GetCapturedValue</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[402]"></a>HAL_HRTIM_GetCaptured</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[403]"></a>HAL_HRTIM_GetCapturedDir</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[404]"></a>HAL_HRTIM_WaveformGetOutputLevel</STRONG> (Thumb, 200 bytes, Stack size 20 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[405]"></a>HAL_HRTIM_WaveformGetOutputState</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[406]"></a>HAL_HRTIM_GetDelayedProtectionStatus</STRONG> (Thumb, 200 bytes, Stack size 20 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[407]"></a>HAL_HRTIM_GetBurstStatus</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[408]"></a>HAL_HRTIM_GetCurrentPushPullStatus</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[409]"></a>HAL_HRTIM_GetIdlePushPullStatus</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>HAL_HRTIM_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_HRTIM_IRQHandler &rArr; HRTIM_Master_ISR &rArr; HAL_HRTIM_RepetitionEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_Timer_ISR
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_Master_ISR
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_HRTIM_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM1_TIMD_IRQHandler
</UL>

<P><STRONG><a name="[244]"></a>HAL_HRTIM_Fault1Callback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_HRTIM_Fault1Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_HRTIM_ISR
</UL>

<P><STRONG><a name="[245]"></a>HAL_HRTIM_Fault2Callback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_HRTIM_Fault2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_HRTIM_ISR
</UL>

<P><STRONG><a name="[246]"></a>HAL_HRTIM_Fault3Callback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_HRTIM_Fault3Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_HRTIM_ISR
</UL>

<P><STRONG><a name="[247]"></a>HAL_HRTIM_Fault4Callback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_HRTIM_Fault4Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_HRTIM_ISR
</UL>

<P><STRONG><a name="[248]"></a>HAL_HRTIM_Fault5Callback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_HRTIM_Fault5Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_HRTIM_ISR
</UL>

<P><STRONG><a name="[249]"></a>HAL_HRTIM_Fault6Callback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_HRTIM_Fault6Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_HRTIM_ISR
</UL>

<P><STRONG><a name="[24a]"></a>HAL_HRTIM_SystemFaultCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_HRTIM_SystemFaultCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_HRTIM_ISR
</UL>

<P><STRONG><a name="[24b]"></a>HAL_HRTIM_DLLCalibrationReadyCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_HRTIM_DLLCalibrationReadyCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_Master_ISR
</UL>

<P><STRONG><a name="[24c]"></a>HAL_HRTIM_BurstModePeriodCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_HRTIM_BurstModePeriodCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_Master_ISR
</UL>

<P><STRONG><a name="[216]"></a>HAL_HRTIM_SynchronizationEventCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_HRTIM_SynchronizationEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_Master_ISR
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_DMAMasterCplt
</UL>

<P><STRONG><a name="[217]"></a>HAL_HRTIM_RegistersUpdateCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_HRTIM_RegistersUpdateCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_Timer_ISR
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_Master_ISR
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_DMATimerxCplt
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_DMAMasterCplt
</UL>

<P><STRONG><a name="[218]"></a>HAL_HRTIM_RepetitionEventCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_HRTIM_RepetitionEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_Timer_ISR
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_Master_ISR
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_DMATimerxCplt
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_DMAMasterCplt
</UL>

<P><STRONG><a name="[212]"></a>HAL_HRTIM_Compare1EventCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_HRTIM_Compare1EventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_Timer_ISR
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_Master_ISR
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_DMATimerxCplt
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_DMAMasterCplt
</UL>

<P><STRONG><a name="[213]"></a>HAL_HRTIM_Compare2EventCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_HRTIM_Compare2EventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_Timer_ISR
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_Master_ISR
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_DMATimerxCplt
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_DMAMasterCplt
</UL>

<P><STRONG><a name="[214]"></a>HAL_HRTIM_Compare3EventCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_HRTIM_Compare3EventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_Timer_ISR
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_Master_ISR
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_DMATimerxCplt
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_DMAMasterCplt
</UL>

<P><STRONG><a name="[215]"></a>HAL_HRTIM_Compare4EventCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_HRTIM_Compare4EventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_Timer_ISR
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_Master_ISR
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_DMATimerxCplt
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_DMAMasterCplt
</UL>

<P><STRONG><a name="[21a]"></a>HAL_HRTIM_Capture1EventCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_HRTIM_Capture1EventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_Timer_ISR
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_DMATimerxCplt
</UL>

<P><STRONG><a name="[21b]"></a>HAL_HRTIM_Capture2EventCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_HRTIM_Capture2EventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_Timer_ISR
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_DMATimerxCplt
</UL>

<P><STRONG><a name="[221]"></a>HAL_HRTIM_DelayedProtectionCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_HRTIM_DelayedProtectionCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_Timer_ISR
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_DMATimerxCplt
</UL>

<P><STRONG><a name="[220]"></a>HAL_HRTIM_CounterResetCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_HRTIM_CounterResetCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_Timer_ISR
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_DMATimerxCplt
</UL>

<P><STRONG><a name="[21c]"></a>HAL_HRTIM_Output1SetCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_HRTIM_Output1SetCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_Timer_ISR
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_DMATimerxCplt
</UL>

<P><STRONG><a name="[21d]"></a>HAL_HRTIM_Output1ResetCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_HRTIM_Output1ResetCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_Timer_ISR
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_DMATimerxCplt
</UL>

<P><STRONG><a name="[21e]"></a>HAL_HRTIM_Output2SetCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_HRTIM_Output2SetCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_Timer_ISR
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_DMATimerxCplt
</UL>

<P><STRONG><a name="[21f]"></a>HAL_HRTIM_Output2ResetCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_HRTIM_Output2ResetCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_Timer_ISR
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_DMATimerxCplt
</UL>

<P><STRONG><a name="[240]"></a>HAL_HRTIM_BurstDMATransferCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_HRTIM_BurstDMATransferCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_BurstDMACplt
</UL>

<P><STRONG><a name="[222]"></a>HAL_HRTIM_ErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_HRTIM_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_DMAError
</UL>

<P><STRONG><a name="[13c]"></a>HAL_I2C_Init</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
</UL>

<P><STRONG><a name="[24d]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>

<P><STRONG><a name="[bd]"></a>HAL_I2C_Master_Transmit</STRONG> (Thumb, 562 bytes, Stack size 40 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = HAL_I2C_Master_Transmit &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
</UL>

<P><STRONG><a name="[253]"></a>HAL_I2C_Master_Receive</STRONG> (Thumb, 508 bytes, Stack size 40 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[255]"></a>HAL_I2C_Slave_Transmit</STRONG> (Thumb, 626 bytes, Stack size 48 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[257]"></a>HAL_I2C_Slave_Receive</STRONG> (Thumb, 508 bytes, Stack size 40 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[258]"></a>HAL_I2C_Master_Transmit_IT</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>

<P><STRONG><a name="[25d]"></a>HAL_I2C_Master_Receive_IT</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>

<P><STRONG><a name="[25e]"></a>HAL_I2C_Slave_Transmit_IT</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
</UL>

<P><STRONG><a name="[263]"></a>HAL_I2C_Slave_Receive_IT</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
</UL>

<P><STRONG><a name="[264]"></a>HAL_I2C_Master_Transmit_DMA</STRONG> (Thumb, 550 bytes, Stack size 48 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[265]"></a>HAL_I2C_Master_Receive_DMA</STRONG> (Thumb, 494 bytes, Stack size 40 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[266]"></a>HAL_I2C_Slave_Transmit_DMA</STRONG> (Thumb, 452 bytes, Stack size 32 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[267]"></a>HAL_I2C_Slave_Receive_DMA</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[268]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 590 bytes, Stack size 40 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[26a]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 612 bytes, Stack size 40 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[26c]"></a>HAL_I2C_Mem_Write_IT</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>

<P><STRONG><a name="[26e]"></a>HAL_I2C_Mem_Read_IT</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>

<P><STRONG><a name="[26f]"></a>HAL_I2C_Mem_Write_DMA</STRONG> (Thumb, 488 bytes, Stack size 32 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[270]"></a>HAL_I2C_Mem_Read_DMA</STRONG> (Thumb, 486 bytes, Stack size 32 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[271]"></a>HAL_I2C_IsDeviceReady</STRONG> (Thumb, 484 bytes, Stack size 56 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[272]"></a>HAL_I2C_Master_Seq_Transmit_IT</STRONG> (Thumb, 418 bytes, Stack size 48 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ConvertOtherXferOptions
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>

<P><STRONG><a name="[274]"></a>HAL_I2C_Master_Seq_Transmit_DMA</STRONG> (Thumb, 712 bytes, Stack size 56 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ConvertOtherXferOptions
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[275]"></a>HAL_I2C_Master_Seq_Receive_IT</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ConvertOtherXferOptions
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>

<P><STRONG><a name="[276]"></a>HAL_I2C_Master_Seq_Receive_DMA</STRONG> (Thumb, 554 bytes, Stack size 48 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ConvertOtherXferOptions
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[277]"></a>HAL_I2C_Slave_Seq_Transmit_IT</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>

<P><STRONG><a name="[27a]"></a>HAL_I2C_Slave_Seq_Transmit_DMA</STRONG> (Thumb, 618 bytes, Stack size 40 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[27b]"></a>HAL_I2C_Slave_Seq_Receive_IT</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>

<P><STRONG><a name="[27c]"></a>HAL_I2C_Slave_Seq_Receive_DMA</STRONG> (Thumb, 618 bytes, Stack size 40 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[27d]"></a>HAL_I2C_EnableListen_IT</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
</UL>

<P><STRONG><a name="[27e]"></a>HAL_I2C_DisableListen_IT</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>

<P><STRONG><a name="[27f]"></a>HAL_I2C_Master_Abort_IT</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>

<P><STRONG><a name="[40a]"></a>HAL_I2C_EV_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)

<P><STRONG><a name="[280]"></a>HAL_I2C_ER_IRQHandler</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>

<P><STRONG><a name="[282]"></a>HAL_I2C_MasterTxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_I2C_MasterTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterSeqCplt
</UL>

<P><STRONG><a name="[283]"></a>HAL_I2C_MasterRxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_I2C_MasterRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterSeqCplt
</UL>

<P><STRONG><a name="[288]"></a>HAL_I2C_SlaveTxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_I2C_SlaveTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSeqCplt
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>

<P><STRONG><a name="[287]"></a>HAL_I2C_SlaveRxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_I2C_SlaveRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSeqCplt
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>

<P><STRONG><a name="[289]"></a>HAL_I2C_AddrCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2C_AddrCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITAddrCplt
</UL>

<P><STRONG><a name="[286]"></a>HAL_I2C_ListenCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_I2C_ListenCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>

<P><STRONG><a name="[284]"></a>HAL_I2C_MemTxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_I2C_MemTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
</UL>

<P><STRONG><a name="[285]"></a>HAL_I2C_MemRxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_I2C_MemRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
</UL>

<P><STRONG><a name="[28b]"></a>HAL_I2C_ErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_I2C_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TreatErrorCallback
</UL>

<P><STRONG><a name="[28a]"></a>HAL_I2C_AbortCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_I2C_AbortCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TreatErrorCallback
</UL>

<P><STRONG><a name="[40b]"></a>HAL_I2C_GetState</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)

<P><STRONG><a name="[40c]"></a>HAL_I2C_GetMode</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)

<P><STRONG><a name="[40d]"></a>HAL_I2C_GetError</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, stm32g4xx_hal_i2c_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
</UL>

<P><STRONG><a name="[13e]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, stm32g4xx_hal_i2c_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2CEx_ConfigDigitalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
</UL>

<P><STRONG><a name="[40e]"></a>HAL_I2CEx_EnableWakeUp</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, stm32g4xx_hal_i2c_ex.o(.text), UNUSED)

<P><STRONG><a name="[40f]"></a>HAL_I2CEx_DisableWakeUp</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, stm32g4xx_hal_i2c_ex.o(.text), UNUSED)

<P><STRONG><a name="[410]"></a>HAL_I2CEx_EnableFastModePlus</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32g4xx_hal_i2c_ex.o(.text), UNUSED)

<P><STRONG><a name="[411]"></a>HAL_I2CEx_DisableFastModePlus</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32g4xx_hal_i2c_ex.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>HAL_IWDG_Init</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, stm32g4xx_hal_iwdg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
</UL>

<P><STRONG><a name="[153]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, stm32g4xx_hal_iwdg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_IWDG_Refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[412]"></a>HAL_PWR_DeInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_DisableLSCO
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_EnableLSCO
</UL>

<P><STRONG><a name="[2a5]"></a>HAL_PWR_DisableBkUpAccess</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_DisableLSCO
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_EnableLSCO
</UL>

<P><STRONG><a name="[413]"></a>HAL_PWR_ConfigPVD</STRONG> (Thumb, 212 bytes, Stack size 4 bytes, stm32g4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[414]"></a>HAL_PWR_EnablePVD</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[415]"></a>HAL_PWR_DisablePVD</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[416]"></a>HAL_PWR_EnableWakeUpPin</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, stm32g4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[417]"></a>HAL_PWR_DisableWakeUpPin</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32g4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>HAL_PWR_EnterSLEEPMode</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32g4xx_hal_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableLowPowerRunMode
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_DisableLowPowerRunMode
</UL>

<P><STRONG><a name="[28f]"></a>HAL_PWR_EnterSTOPMode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32g4xx_hal_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnterSTOP0Mode
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnterSTOP1Mode
</UL>

<P><STRONG><a name="[418]"></a>HAL_PWR_EnterSTANDBYMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[419]"></a>HAL_PWR_EnableSleepOnExit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[41a]"></a>HAL_PWR_DisableSleepOnExit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[41b]"></a>HAL_PWR_EnableSEVOnPend</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[41c]"></a>HAL_PWR_DisableSEVOnPend</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[293]"></a>HAL_PWR_PVDCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVD_PVM_IRQHandler
</UL>

<P><STRONG><a name="[41d]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 428 bytes, Stack size 20 bytes, stm32g4xx_hal_pwr_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PWREx_ControlVoltageScaling
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[41e]"></a>HAL_PWREx_EnableBatteryCharging</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[41f]"></a>HAL_PWREx_DisableBatteryCharging</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[420]"></a>HAL_PWREx_EnableInternalWakeUpLine</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[421]"></a>HAL_PWREx_DisableInternalWakeUpLine</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[422]"></a>HAL_PWREx_EnableGPIOPullUp</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[423]"></a>HAL_PWREx_DisableGPIOPullUp</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[424]"></a>HAL_PWREx_EnableGPIOPullDown</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[425]"></a>HAL_PWREx_DisableGPIOPullDown</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[426]"></a>HAL_PWREx_EnablePullUpPullDownConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[427]"></a>HAL_PWREx_DisablePullUpPullDownConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[428]"></a>HAL_PWREx_EnableSRAM2ContentRetention</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[429]"></a>HAL_PWREx_DisableSRAM2ContentRetention</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[42a]"></a>HAL_PWREx_EnablePVM1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[42b]"></a>HAL_PWREx_DisablePVM1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[42c]"></a>HAL_PWREx_EnablePVM2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[42d]"></a>HAL_PWREx_DisablePVM2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[42e]"></a>HAL_PWREx_EnablePVM3</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[42f]"></a>HAL_PWREx_DisablePVM3</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[430]"></a>HAL_PWREx_EnablePVM4</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[431]"></a>HAL_PWREx_DisablePVM4</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[432]"></a>HAL_PWREx_ConfigPVM</STRONG> (Thumb, 788 bytes, Stack size 12 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[28e]"></a>HAL_PWREx_EnableLowPowerRunMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
</UL>

<P><STRONG><a name="[28d]"></a>HAL_PWREx_DisableLowPowerRunMode</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
</UL>

<P><STRONG><a name="[291]"></a>HAL_PWREx_EnterSTOP0Mode</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
</UL>

<P><STRONG><a name="[290]"></a>HAL_PWREx_EnterSTOP1Mode</STRONG> (Thumb, 82 bytes, Stack size 4 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
</UL>

<P><STRONG><a name="[433]"></a>HAL_PWREx_EnterSHUTDOWNMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[292]"></a>HAL_PWREx_PVD_PVM_IRQHandler</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVM4Callback
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVM3Callback
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVM2Callback
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVM1Callback
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_PVDCallback
</UL>

<P><STRONG><a name="[294]"></a>HAL_PWREx_PVM1Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVD_PVM_IRQHandler
</UL>

<P><STRONG><a name="[295]"></a>HAL_PWREx_PVM2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVD_PVM_IRQHandler
</UL>

<P><STRONG><a name="[296]"></a>HAL_PWREx_PVM3Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVD_PVM_IRQHandler
</UL>

<P><STRONG><a name="[297]"></a>HAL_PWREx_PVM4Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVD_PVM_IRQHandler
</UL>

<P><STRONG><a name="[434]"></a>HAL_PWREx_EnableUCPDStandbyMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[435]"></a>HAL_PWREx_DisableUCPDStandbyMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[436]"></a>HAL_PWREx_EnableUCPDDeadBattery</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>HAL_PWREx_DisableUCPDDeadBattery</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[298]"></a>HAL_RCC_DeInit</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, stm32g4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[155]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1924 bytes, Stack size 48 bytes, stm32g4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[156]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 788 bytes, Stack size 32 bytes, stm32g4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSysClockFreqFromPLLSource
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[29a]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, stm32g4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[29b]"></a>HAL_RCC_MCOConfig</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, stm32g4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>

<P><STRONG><a name="[29d]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[29c]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32g4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[29e]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32g4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[437]"></a>HAL_RCC_GetOscConfig</STRONG> (Thumb, 372 bytes, Stack size 4 bytes, stm32g4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[438]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32g4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>HAL_RCC_EnableCSS</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[439]"></a>HAL_RCC_EnableLSECSS</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[43a]"></a>HAL_RCC_DisableLSECSS</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>HAL_RCC_NMI_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32g4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_NMI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_CSSCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[29f]"></a>HAL_RCC_CSSCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_NMI_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1288 bytes, Stack size 40 bytes, stm32g4xx_hal_rcc_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[43b]"></a>HAL_RCCEx_GetPeriphCLKConfig</STRONG> (Thumb, 244 bytes, Stack size 4 bytes, stm32g4xx_hal_rcc_ex.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 2944 bytes, Stack size 40 bytes, stm32g4xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[43c]"></a>HAL_RCCEx_EnableLSECSS</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc_ex.o(.text), UNUSED)

<P><STRONG><a name="[43d]"></a>HAL_RCCEx_DisableLSECSS</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc_ex.o(.text), UNUSED)

<P><STRONG><a name="[43e]"></a>HAL_RCCEx_EnableLSECSS_IT</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc_ex.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>HAL_RCCEx_LSECSS_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32g4xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_LSECSS_Callback
</UL>

<P><STRONG><a name="[2a2]"></a>HAL_RCCEx_LSECSS_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_LSECSS_IRQHandler
</UL>

<P><STRONG><a name="[2a3]"></a>HAL_RCCEx_EnableLSCO</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, stm32g4xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_DisableBkUpAccess
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
</UL>

<P><STRONG><a name="[2a6]"></a>HAL_RCCEx_DisableLSCO</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, stm32g4xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_DisableBkUpAccess
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
</UL>

<P><STRONG><a name="[43f]"></a>HAL_RCCEx_CRSConfig</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32g4xx_hal_rcc_ex.o(.text), UNUSED)

<P><STRONG><a name="[440]"></a>HAL_RCCEx_CRSSoftwareSynchronizationGenerate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc_ex.o(.text), UNUSED)

<P><STRONG><a name="[441]"></a>HAL_RCCEx_CRSGetSynchronizationInfo</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, stm32g4xx_hal_rcc_ex.o(.text), UNUSED)

<P><STRONG><a name="[2a7]"></a>HAL_RCCEx_CRSWaitSynchronization</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, stm32g4xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[2a8]"></a>HAL_RCCEx_CRS_IRQHandler</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, stm32g4xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_CRS_ErrorCallback
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_CRS_ExpectedSyncCallback
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_CRS_SyncWarnCallback
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_CRS_SyncOkCallback
</UL>

<P><STRONG><a name="[2a9]"></a>HAL_RCCEx_CRS_SyncOkCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_CRS_IRQHandler
</UL>

<P><STRONG><a name="[2aa]"></a>HAL_RCCEx_CRS_SyncWarnCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_CRS_IRQHandler
</UL>

<P><STRONG><a name="[2ab]"></a>HAL_RCCEx_CRS_ExpectedSyncCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_CRS_IRQHandler
</UL>

<P><STRONG><a name="[2ac]"></a>HAL_RCCEx_CRS_ErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_CRS_IRQHandler
</UL>

<P><STRONG><a name="[15d]"></a>HAL_SPI_Init</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
</UL>

<P><STRONG><a name="[2ad]"></a>HAL_SPI_DeInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32g4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
</UL>

<P><STRONG><a name="[2ae]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 712 bytes, Stack size 48 bytes, stm32g4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[2b2]"></a>HAL_SPI_Receive</STRONG> (Thumb, 598 bytes, Stack size 40 bytes, stm32g4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>

<P><STRONG><a name="[ed]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 1056 bytes, Stack size 64 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MySPI_SwapByte
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[442]"></a>HAL_SPI_Transmit_IT</STRONG> (Thumb, 276 bytes, Stack size 20 bytes, stm32g4xx_hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[2b5]"></a>HAL_SPI_Receive_IT</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, stm32g4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_IT
</UL>

<P><STRONG><a name="[2b6]"></a>HAL_SPI_TransmitReceive_IT</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, stm32g4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_IT
</UL>

<P><STRONG><a name="[2b9]"></a>HAL_SPI_Transmit_DMA</STRONG> (Thumb, 442 bytes, Stack size 32 bytes, stm32g4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[2bd]"></a>HAL_SPI_Receive_DMA</STRONG> (Thumb, 534 bytes, Stack size 32 bytes, stm32g4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
</UL>

<P><STRONG><a name="[2be]"></a>HAL_SPI_TransmitReceive_DMA</STRONG> (Thumb, 716 bytes, Stack size 40 bytes, stm32g4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
</UL>

<P><STRONG><a name="[2c3]"></a>HAL_SPI_Abort</STRONG> (Thumb, 610 bytes, Stack size 56 bytes, stm32g4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[2c4]"></a>HAL_SPI_Abort_IT</STRONG> (Thumb, 538 bytes, Stack size 40 bytes, stm32g4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_AbortCpltCallback
</UL>

<P><STRONG><a name="[2c5]"></a>HAL_SPI_AbortCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SPI_AbortCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Abort_IT
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMARxAbortCallback
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATxAbortCallback
</UL>

<P><STRONG><a name="[443]"></a>HAL_SPI_DMAPause</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32g4xx_hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[444]"></a>HAL_SPI_DMAResume</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32g4xx_hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[2c6]"></a>HAL_SPI_DMAStop</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32g4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[2c7]"></a>HAL_SPI_IRQHandler</STRONG> (Thumb, 556 bytes, Stack size 40 bytes, stm32g4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>

<P><STRONG><a name="[2bb]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SPI_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAAbortOnError
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAError
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTx_ISR
</UL>

<P><STRONG><a name="[2bc]"></a>HAL_SPI_TxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SPI_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTx_ISR
</UL>

<P><STRONG><a name="[2c0]"></a>HAL_SPI_RxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SPI_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
</UL>

<P><STRONG><a name="[2c2]"></a>HAL_SPI_TxRxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SPI_TxRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>

<P><STRONG><a name="[2ba]"></a>HAL_SPI_TxHalfCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SPI_TxHalfCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitCplt
</UL>

<P><STRONG><a name="[2bf]"></a>HAL_SPI_RxHalfCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SPI_RxHalfCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfReceiveCplt
</UL>

<P><STRONG><a name="[2c1]"></a>HAL_SPI_TxRxHalfCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SPI_TxRxHalfCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitReceiveCplt
</UL>

<P><STRONG><a name="[445]"></a>HAL_SPI_GetState</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32g4xx_hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[446]"></a>HAL_SPI_GetError</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32g4xx_hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[2c8]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 486 bytes, Stack size 12 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[2c9]"></a>HAL_TIM_Base_DeInit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspDeInit
</UL>

<P><STRONG><a name="[447]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 240 bytes, Stack size 12 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[448]"></a>HAL_TIM_Base_Stop</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 252 bytes, Stack size 12 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[449]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ca]"></a>HAL_TIM_Base_Start_DMA</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[99]"></a>TIM_DMAError</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_DMAError &rArr; HAL_TIM_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ErrorCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32g4xx_hal_tim_ex.o(.text)
<LI> stm32g4xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[2cd]"></a>HAL_TIM_Base_Stop_DMA</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>

<P><STRONG><a name="[2ce]"></a>HAL_TIM_OC_Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>

<P><STRONG><a name="[2cf]"></a>HAL_TIM_OC_MspInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[2d0]"></a>HAL_TIM_OC_DeInit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspDeInit
</UL>

<P><STRONG><a name="[2d1]"></a>HAL_TIM_OC_MspDeInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DeInit
</UL>

<P><STRONG><a name="[2d2]"></a>HAL_TIM_OC_Start</STRONG> (Thumb, 634 bytes, Stack size 72 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2d3]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OnePulseN_Stop_IT
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OnePulseN_Start_IT
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OnePulseN_Stop
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OnePulseN_Start
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Stop_DMA
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Start_DMA
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Stop_IT
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Start_IT
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Stop
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Start
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Stop_DMA
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start_DMA
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Stop_IT
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start_IT
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Stop
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Stop_IT
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Start_IT
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Stop
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Start
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop_DMA
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_DMA
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop_IT
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop_DMA
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_DMA
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop_IT
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_IT
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop_DMA
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_DMA
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop_IT
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_IT
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
</UL>

<P><STRONG><a name="[2d4]"></a>HAL_TIM_OC_Stop</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2d5]"></a>HAL_TIM_OC_Start_IT</STRONG> (Thumb, 740 bytes, Stack size 80 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2d6]"></a>HAL_TIM_OC_Stop_IT</STRONG> (Thumb, 498 bytes, Stack size 48 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2d7]"></a>HAL_TIM_OC_Start_DMA</STRONG> (Thumb, 1178 bytes, Stack size 104 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[9b]"></a>TIM_DMADelayPulseHalfCplt</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_DMADelayPulseHalfCplt &rArr; HAL_TIM_PWM_PulseFinishedHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedHalfCpltCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32g4xx_hal_tim_ex.o(.text)
<LI> stm32g4xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[2da]"></a>HAL_TIM_OC_Stop_DMA</STRONG> (Thumb, 530 bytes, Stack size 48 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[16d]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
</UL>

<P><STRONG><a name="[2db]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[2dc]"></a>HAL_TIM_PWM_DeInit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspDeInit
</UL>

<P><STRONG><a name="[2dd]"></a>HAL_TIM_PWM_MspDeInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_DeInit
</UL>

<P><STRONG><a name="[14b]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 634 bytes, Stack size 72 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2de]"></a>HAL_TIM_PWM_Stop</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2df]"></a>HAL_TIM_PWM_Start_IT</STRONG> (Thumb, 740 bytes, Stack size 80 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2e0]"></a>HAL_TIM_PWM_Stop_IT</STRONG> (Thumb, 498 bytes, Stack size 48 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2e1]"></a>HAL_TIM_PWM_Start_DMA</STRONG> (Thumb, 1178 bytes, Stack size 104 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2e2]"></a>HAL_TIM_PWM_Stop_DMA</STRONG> (Thumb, 530 bytes, Stack size 48 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2e3]"></a>HAL_TIM_IC_Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>

<P><STRONG><a name="[2e4]"></a>HAL_TIM_IC_MspInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
</UL>

<P><STRONG><a name="[2e5]"></a>HAL_TIM_IC_DeInit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspDeInit
</UL>

<P><STRONG><a name="[2e6]"></a>HAL_TIM_IC_MspDeInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_DeInit
</UL>

<P><STRONG><a name="[2e7]"></a>HAL_TIM_IC_Start</STRONG> (Thumb, 628 bytes, Stack size 88 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2e8]"></a>HAL_TIM_IC_Stop</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2e9]"></a>HAL_TIM_IC_Start_IT</STRONG> (Thumb, 732 bytes, Stack size 96 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2ea]"></a>HAL_TIM_IC_Stop_IT</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2eb]"></a>HAL_TIM_IC_Start_DMA</STRONG> (Thumb, 1058 bytes, Stack size 104 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[9c]"></a>TIM_DMACaptureCplt</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_DMACaptureCplt &rArr; HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32g4xx_hal_tim_ex.o(.text)
<LI> stm32g4xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[9d]"></a>TIM_DMACaptureHalfCplt</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_DMACaptureHalfCplt &rArr; HAL_TIM_IC_CaptureHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureHalfCpltCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32g4xx_hal_tim_ex.o(.text)
<LI> stm32g4xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[2ee]"></a>HAL_TIM_IC_Stop_DMA</STRONG> (Thumb, 400 bytes, Stack size 48 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2ef]"></a>HAL_TIM_OnePulse_Init</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_MspInit
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>

<P><STRONG><a name="[2f0]"></a>HAL_TIM_OnePulse_MspInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Init
</UL>

<P><STRONG><a name="[2f1]"></a>HAL_TIM_OnePulse_DeInit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_MspDeInit
</UL>

<P><STRONG><a name="[2f2]"></a>HAL_TIM_OnePulse_MspDeInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_DeInit
</UL>

<P><STRONG><a name="[2f3]"></a>HAL_TIM_OnePulse_Start</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2f4]"></a>HAL_TIM_OnePulse_Stop</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2f5]"></a>HAL_TIM_OnePulse_Start_IT</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2f6]"></a>HAL_TIM_OnePulse_Stop_IT</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2f7]"></a>HAL_TIM_Encoder_Init</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>

<P><STRONG><a name="[2f8]"></a>HAL_TIM_Encoder_MspInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
</UL>

<P><STRONG><a name="[2f9]"></a>HAL_TIM_Encoder_DeInit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspDeInit
</UL>

<P><STRONG><a name="[2fa]"></a>HAL_TIM_Encoder_MspDeInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_DeInit
</UL>

<P><STRONG><a name="[2fb]"></a>HAL_TIM_Encoder_Start</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2fc]"></a>HAL_TIM_Encoder_Stop</STRONG> (Thumb, 362 bytes, Stack size 48 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2fd]"></a>HAL_TIM_Encoder_Start_IT</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2fe]"></a>HAL_TIM_Encoder_Stop_IT</STRONG> (Thumb, 410 bytes, Stack size 48 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[2ff]"></a>HAL_TIM_Encoder_Start_DMA</STRONG> (Thumb, 802 bytes, Stack size 56 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[300]"></a>HAL_TIM_Encoder_Stop_DMA</STRONG> (Thumb, 442 bytes, Stack size 48 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[166]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 768 bytes, Stack size 24 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; OTP &rArr; GET_NTC_Temperature &rArr; calculateTemperature &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_TransitionErrorCallback
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_IndexErrorCallback
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_DirectionChangeCallback
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_EncoderIndexCallback
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[2ec]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMACaptureCplt
</UL>

<P><STRONG><a name="[301]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_OC_DelayElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2d8]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMADelayPulseNCplt
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMADelayPulseCplt
</UL>

<P><STRONG><a name="[304]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_TriggerCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMATriggerCplt
</UL>

<P><STRONG><a name="[30a]"></a>HAL_TIM_OC_ConfigChannel</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC6_SetConfig
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC5_SetConfig
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>

<P><STRONG><a name="[30c]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 400 bytes, Stack size 20 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Init
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_ConfigChannel
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[311]"></a>HAL_TIM_IC_ConfigChannel</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI4_SetConfig
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI3_SetConfig
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_SetConfig
</UL>

<P><STRONG><a name="[312]"></a>TIM_TI1_SetConfig</STRONG> (Thumb, 280 bytes, Stack size 28 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Init
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_ConfigChannel
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[16e]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 414 bytes, Stack size 32 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC6_SetConfig
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC5_SetConfig
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
</UL>

<P><STRONG><a name="[316]"></a>HAL_TIM_OnePulse_ConfigChannel</STRONG> (Thumb, 390 bytes, Stack size 72 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_SetConfig
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>

<P><STRONG><a name="[317]"></a>HAL_TIM_DMABurst_WriteStart</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_DMABurst_MultiWriteStart
</UL>

<P><STRONG><a name="[318]"></a>HAL_TIM_DMABurst_MultiWriteStart</STRONG> (Thumb, 716 bytes, Stack size 40 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_DMABurst_WriteStart
</UL>

<P><STRONG><a name="[31a]"></a>HAL_TIM_DMABurst_WriteStop</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>

<P><STRONG><a name="[31b]"></a>HAL_TIM_DMABurst_ReadStart</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_DMABurst_MultiReadStart
</UL>

<P><STRONG><a name="[31c]"></a>HAL_TIM_DMABurst_MultiReadStart</STRONG> (Thumb, 716 bytes, Stack size 40 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_DMABurst_ReadStart
</UL>

<P><STRONG><a name="[31d]"></a>HAL_TIM_DMABurst_ReadStop</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>

<P><STRONG><a name="[44a]"></a>HAL_TIM_GenerateEvent</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[31e]"></a>HAL_TIM_ConfigOCrefClear</STRONG> (Thumb, 1022 bytes, Stack size 40 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>

<P><STRONG><a name="[31f]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigEncoderIndex
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigOCrefClear
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>

<P><STRONG><a name="[16b]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 486 bytes, Stack size 32 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[44b]"></a>HAL_TIM_ConfigTI1Input</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[323]"></a>HAL_TIM_SlaveConfigSynchro</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>

<P><STRONG><a name="[325]"></a>HAL_TIM_SlaveConfigSynchro_IT</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>

<P><STRONG><a name="[44c]"></a>HAL_TIM_ReadCapturedValue</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[2cb]"></a>HAL_TIM_PeriodElapsedHalfCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_PeriodElapsedHalfCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMAPeriodElapsedHalfCplt
</UL>

<P><STRONG><a name="[2ed]"></a>HAL_TIM_IC_CaptureHalfCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_IC_CaptureHalfCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMACaptureHalfCplt
</UL>

<P><STRONG><a name="[2d9]"></a>HAL_TIM_PWM_PulseFinishedHalfCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_PWM_PulseFinishedHalfCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMADelayPulseHalfCplt
</UL>

<P><STRONG><a name="[319]"></a>HAL_TIM_TriggerHalfCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_TriggerHalfCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMATriggerHalfCplt
</UL>

<P><STRONG><a name="[2cc]"></a>HAL_TIM_ErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMAErrorCCxN
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMAError
</UL>

<P><STRONG><a name="[44d]"></a>HAL_TIM_Base_GetState</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[44e]"></a>HAL_TIM_OC_GetState</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[44f]"></a>HAL_TIM_PWM_GetState</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[450]"></a>HAL_TIM_IC_GetState</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[451]"></a>HAL_TIM_OnePulse_GetState</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[452]"></a>HAL_TIM_Encoder_GetState</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[453]"></a>HAL_TIM_GetActiveChannel</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[454]"></a>HAL_TIM_GetChannelState</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[455]"></a>HAL_TIM_DMABurstState</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[326]"></a>HAL_TIMEx_HallSensor_Init</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_MspInit
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>

<P><STRONG><a name="[327]"></a>HAL_TIMEx_HallSensor_MspInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Init
</UL>

<P><STRONG><a name="[328]"></a>HAL_TIMEx_HallSensor_DeInit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_MspDeInit
</UL>

<P><STRONG><a name="[329]"></a>HAL_TIMEx_HallSensor_MspDeInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_DeInit
</UL>

<P><STRONG><a name="[32a]"></a>HAL_TIMEx_HallSensor_Start</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[32b]"></a>HAL_TIMEx_HallSensor_Stop</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[32c]"></a>HAL_TIMEx_HallSensor_Start_IT</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[32d]"></a>HAL_TIMEx_HallSensor_Stop_IT</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[32e]"></a>HAL_TIMEx_HallSensor_Start_DMA</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[32f]"></a>HAL_TIMEx_HallSensor_Stop_DMA</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[330]"></a>HAL_TIMEx_OCN_Start</STRONG> (Thumb, 396 bytes, Stack size 48 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[332]"></a>HAL_TIMEx_OCN_Stop</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[333]"></a>HAL_TIMEx_OCN_Start_IT</STRONG> (Thumb, 512 bytes, Stack size 56 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[334]"></a>HAL_TIMEx_OCN_Stop_IT</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[335]"></a>HAL_TIMEx_OCN_Start_DMA</STRONG> (Thumb, 894 bytes, Stack size 72 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[336]"></a>HAL_TIMEx_OCN_Stop_DMA</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[337]"></a>HAL_TIMEx_PWMN_Start</STRONG> (Thumb, 396 bytes, Stack size 48 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[338]"></a>HAL_TIMEx_PWMN_Stop</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[339]"></a>HAL_TIMEx_PWMN_Start_IT</STRONG> (Thumb, 512 bytes, Stack size 56 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[33a]"></a>HAL_TIMEx_PWMN_Stop_IT</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[33b]"></a>HAL_TIMEx_PWMN_Start_DMA</STRONG> (Thumb, 894 bytes, Stack size 72 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[33c]"></a>HAL_TIMEx_PWMN_Stop_DMA</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[33d]"></a>HAL_TIMEx_OnePulseN_Start</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[33e]"></a>HAL_TIMEx_OnePulseN_Stop</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[33f]"></a>HAL_TIMEx_OnePulseN_Start_IT</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[340]"></a>HAL_TIMEx_OnePulseN_Stop_IT</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[456]"></a>HAL_TIMEx_ConfigCommutEvent</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[457]"></a>HAL_TIMEx_ConfigCommutEvent_IT</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[458]"></a>HAL_TIMEx_ConfigCommutEvent_DMA</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>TIMEx_DMACommutationCplt</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32g4xx_hal_tim_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIMEx_DMACommutationCplt &rArr; HAL_TIMEx_CommutCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32g4xx_hal_tim_ex.o(.text)
<LI> stm32g4xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[9f]"></a>TIMEx_DMACommutationHalfCplt</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32g4xx_hal_tim_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIMEx_DMACommutationHalfCplt &rArr; HAL_TIMEx_CommutHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutHalfCpltCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32g4xx_hal_tim_ex.o(.text)
<LI> stm32g4xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[16c]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 356 bytes, Stack size 20 bytes, stm32g4xx_hal_tim_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[16f]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, stm32g4xx_hal_tim_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
</UL>

<P><STRONG><a name="[459]"></a>HAL_TIMEx_ConfigBreakInput</STRONG> (Thumb, 454 bytes, Stack size 48 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[45a]"></a>HAL_TIMEx_RemapConfig</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[45b]"></a>HAL_TIMEx_TISelection</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[45c]"></a>HAL_TIMEx_GroupChannel5</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[45d]"></a>HAL_TIMEx_DisarmBreakInput</STRONG> (Thumb, 136 bytes, Stack size 20 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[342]"></a>HAL_TIMEx_ReArmBreakInput</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[45e]"></a>HAL_TIMEx_DitheringEnable</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[45f]"></a>HAL_TIMEx_DitheringDisable</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[460]"></a>HAL_TIMEx_OC_ConfigPulseOnCompare</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[461]"></a>HAL_TIMEx_ConfigSlaveModePreload</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[462]"></a>HAL_TIMEx_EnableSlaveModePreload</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[463]"></a>HAL_TIMEx_DisableSlaveModePreload</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[464]"></a>HAL_TIMEx_EnableDeadTimePreload</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[465]"></a>HAL_TIMEx_DisableDeadTimePreload</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[466]"></a>HAL_TIMEx_ConfigDeadTime</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[467]"></a>HAL_TIMEx_ConfigAsymmetricalDeadTime</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[468]"></a>HAL_TIMEx_EnableAsymmetricalDeadTime</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[469]"></a>HAL_TIMEx_DisableAsymmetricalDeadTime</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[343]"></a>HAL_TIMEx_ConfigEncoderIndex</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>

<P><STRONG><a name="[46a]"></a>HAL_TIMEx_EnableEncoderIndex</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[46b]"></a>HAL_TIMEx_DisableEncoderIndex</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[46c]"></a>HAL_TIMEx_EnableEncoderFirstIndex</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[46d]"></a>HAL_TIMEx_DisableEncoderFirstIndex</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_CommutCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEx_DMACommutationCplt
</UL>

<P><STRONG><a name="[341]"></a>HAL_TIMEx_CommutHalfCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_CommutHalfCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEx_DMACommutationHalfCplt
</UL>

<P><STRONG><a name="[302]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[303]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[306]"></a>HAL_TIMEx_EncoderIndexCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_EncoderIndexCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[307]"></a>HAL_TIMEx_DirectionChangeCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_DirectionChangeCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[308]"></a>HAL_TIMEx_IndexErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_IndexErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[309]"></a>HAL_TIMEx_TransitionErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_TransitionErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[46e]"></a>HAL_TIMEx_HallSensor_GetState</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[46f]"></a>HAL_TIMEx_GetChannelNState</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>HAL_UART_Init</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[344]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 328 bytes, Stack size 4 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RS485Ex_Init
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_Init
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
</UL>

<P><STRONG><a name="[345]"></a>UART_SetConfig</STRONG> (Thumb, 1414 bytes, Stack size 88 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RS485Ex_Init
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_Init
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
</UL>

<P><STRONG><a name="[346]"></a>UART_CheckIdleState</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessorEx_AddressLength_Set
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RS485Ex_Init
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_DisableMuteMode
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_EnableMuteMode
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_Init
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
</UL>

<P><STRONG><a name="[349]"></a>HAL_HalfDuplex_Init</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>

<P><STRONG><a name="[34a]"></a>HAL_LIN_Init</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>

<P><STRONG><a name="[34b]"></a>HAL_MultiProcessor_Init</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>

<P><STRONG><a name="[34c]"></a>HAL_UART_DeInit</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[34d]"></a>HAL_UART_Transmit</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[348]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[34f]"></a>HAL_UART_Receive</STRONG> (Thumb, 428 bytes, Stack size 48 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[470]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[350]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>

<P><STRONG><a name="[351]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 546 bytes, Stack size 32 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_IT
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[17b]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TX_DMA_String
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Printf
</UL>

<P><STRONG><a name="[356]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>

<P><STRONG><a name="[357]"></a>UART_Start_Receive_DMA</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>

<P><STRONG><a name="[471]"></a>HAL_UART_DMAPause</STRONG> (Thumb, 226 bytes, Stack size 28 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[472]"></a>HAL_UART_DMAResume</STRONG> (Thumb, 208 bytes, Stack size 20 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[358]"></a>HAL_UART_DMAStop</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>

<P><STRONG><a name="[35a]"></a>HAL_UART_Abort</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[35b]"></a>HAL_UART_AbortTransmit</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[35c]"></a>HAL_UART_AbortReceive</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[35d]"></a>HAL_UART_Abort_IT</STRONG> (Thumb, 558 bytes, Stack size 40 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortCpltCallback
</UL>

<P><STRONG><a name="[35e]"></a>HAL_UART_AbortCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_AbortCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Abort_IT
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxAbortCallback
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxAbortCallback
</UL>

<P><STRONG><a name="[35f]"></a>HAL_UART_AbortTransmit_IT</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmitCpltCallback
</UL>

<P><STRONG><a name="[360]"></a>HAL_UART_AbortTransmitCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_AbortTransmitCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit_IT
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxOnlyAbortCallback
</UL>

<P><STRONG><a name="[361]"></a>HAL_UART_AbortReceive_IT</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceiveCpltCallback
</UL>

<P><STRONG><a name="[362]"></a>HAL_UART_AbortReceiveCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_AbortReceiveCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive_IT
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxOnlyAbortCallback
</UL>

<P><STRONG><a name="[167]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 1374 bytes, Stack size 72 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxFifoFullCallback
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_TxFifoEmptyCallback
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[355]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
</UL>

<P><STRONG><a name="[363]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
</UL>

<P><STRONG><a name="[353]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[36a]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
</UL>

<P><STRONG><a name="[36b]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[473]"></a>HAL_UART_ReceiverTimeout_Config</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[474]"></a>HAL_UART_EnableReceiverTimeout</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[475]"></a>HAL_UART_DisableReceiverTimeout</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[368]"></a>HAL_MultiProcessor_EnableMuteMode</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[369]"></a>HAL_MultiProcessor_DisableMuteMode</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[476]"></a>HAL_MultiProcessor_EnterMuteMode</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[477]"></a>HAL_HalfDuplex_EnableTransmitter</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[478]"></a>HAL_HalfDuplex_EnableReceiver</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[479]"></a>HAL_LIN_SendBreak</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[47a]"></a>HAL_UART_GetState</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[47b]"></a>HAL_UART_GetError</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, stm32g4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[36c]"></a>HAL_RS485Ex_Init</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, stm32g4xx_hal_uart_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>

<P><STRONG><a name="[364]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_uart_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UARTEx_WakeupCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[367]"></a>HAL_UARTEx_RxFifoFullCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_uart_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UARTEx_RxFifoFullCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[366]"></a>HAL_UARTEx_TxFifoEmptyCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_uart_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UARTEx_TxFifoEmptyCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[36d]"></a>HAL_MultiProcessorEx_AddressLength_Set</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, stm32g4xx_hal_uart_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[36e]"></a>HAL_UARTEx_StopModeWakeUpSourceConfig</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, stm32g4xx_hal_uart_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_Wakeup_AddressConfig
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[47c]"></a>HAL_UARTEx_EnableStopMode</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, stm32g4xx_hal_uart_ex.o(.text), UNUSED)

<P><STRONG><a name="[47d]"></a>HAL_UARTEx_DisableStopMode</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, stm32g4xx_hal_uart_ex.o(.text), UNUSED)

<P><STRONG><a name="[370]"></a>HAL_UARTEx_EnableFifoMode</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32g4xx_hal_uart_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>

<P><STRONG><a name="[176]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, stm32g4xx_hal_uart_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_UARTEx_DisableFifoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[174]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, stm32g4xx_hal_uart_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[175]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, stm32g4xx_hal_uart_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[372]"></a>HAL_UARTEx_ReceiveToIdle</STRONG> (Thumb, 548 bytes, Stack size 48 bytes, stm32g4xx_hal_uart_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[373]"></a>HAL_UARTEx_ReceiveToIdle_IT</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, stm32g4xx_hal_uart_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>

<P><STRONG><a name="[374]"></a>HAL_UARTEx_ReceiveToIdle_DMA</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, stm32g4xx_hal_uart_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>

<P><STRONG><a name="[47e]"></a>HAL_UARTEx_GetRxEventType</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32g4xx_hal_uart_ex.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ADC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ADC5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>COMP1_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>COMP4_5_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>COMP7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>CORDIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DMA1_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMA2_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMAMUX_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>FDCAN3_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>FDCAN3_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>FMAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>HRTIM1_TIMF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RTC_TAMP_LSECSS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM20_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIM20_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIM20_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIM20_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UCPD1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g474xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g474xx.o(RESET)
</UL>
<P><STRONG><a name="[347]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[378]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[47f]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[480]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[377]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_HRTIM1_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[481]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[379]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[db]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateTemperature
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawEllipse
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateTemperature
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawEllipse
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowFloatNum
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[37d]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawEllipse
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowFloatNum
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_IsInAngle
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateTemperature
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_IsInAngle
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_dcmple</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmple.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_dcmplt</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmplt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowFloatNum
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_dcmpge</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmpge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawEllipse
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawEllipse
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_IsInAngle
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowFloatNum
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_IsInAngle
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowFloatNum
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateTemperature
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateTemperature
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawEllipse
</UL>

<P><STRONG><a name="[482]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[398]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[376]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[483]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[375]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[484]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[37a]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[485]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[486]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[37e]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[487]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[37c]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[37b]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[37f]"></a>_drnd</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, drnd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[380]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[38f]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[393]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[394]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[bb]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[488]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>BuckBoostVILoopCtlPID</STRONG> (Thumb, 1302 bytes, Stack size 24 bytes, PID.o(ccmram))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BuckBoostVILoopCtlPID
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM1_TIMD_IRQHandler
</UL>

<P><STRONG><a name="[159]"></a>ADCSample</STRONG> (Thumb, 258 bytes, Stack size 0 bytes, function.o(ccmram))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[15a]"></a>StateM</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, function.o(ccmram))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = StateM &rArr; StateMInit &rArr; ValInit &rArr; HAL_HRTIM_WaveformOutputStop
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMErr
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMRun
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMRise
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMWait
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[15b]"></a>BBMode</STRONG> (Thumb, 724 bytes, Stack size 12 bytes, function.o(ccmram))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BBMode
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[384]"></a>__0vsnprintf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[489]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[48a]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[48b]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[17c]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Printf
</UL>

<P><STRONG><a name="[386]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[48c]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[48d]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[48e]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[dd]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Printf
</UL>

<P><STRONG><a name="[389]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[387]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[c6]"></a>__hardfp_atan2</STRONG> (Thumb, 448 bytes, Stack size 56 bytes, atan2.o(i.__hardfp_atan2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_IsInAngle
</UL>

<P><STRONG><a name="[122]"></a>__hardfp_log</STRONG> (Thumb, 872 bytes, Stack size 88 bytes, log.o(i.__hardfp_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateTemperature
</UL>

<P><STRONG><a name="[d9]"></a>__hardfp_round</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, round.o(i.__hardfp_round), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowFloatNum
</UL>

<P><STRONG><a name="[38c]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[392]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[388]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[38d]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[391]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[38a]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[48f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[490]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[491]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[390]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[38e]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[38b]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[185]"></a>LL_ADC_IsDeepPowerDownEnabled</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsDeepPowerDownEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[186]"></a>LL_ADC_DisableDeepPowerDown</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_DisableDeepPowerDown
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[187]"></a>LL_ADC_IsInternalRegulatorEnabled</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsInternalRegulatorEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[188]"></a>LL_ADC_EnableInternalRegulator</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_EnableInternalRegulator
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[189]"></a>LL_ADC_REG_IsConversionOngoing</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_REG_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_AnalogWDGConfig
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_IT
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[18a]"></a>LL_ADC_IsEnabled</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[18b]"></a>LL_ADC_SetCommonClock</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_SetCommonClock
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[18c]"></a>LL_ADC_INJ_IsConversionOngoing</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_INJ_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_AnalogWDGConfig
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[190]"></a>LL_ADC_IsDisableOngoing</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsDisableOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
</UL>

<P><STRONG><a name="[191]"></a>LL_ADC_REG_StopConversion</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
</UL>

<P><STRONG><a name="[192]"></a>LL_ADC_INJ_StopConversion</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
</UL>

<P><STRONG><a name="[193]"></a>LL_ADC_Disable</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>

<P><STRONG><a name="[194]"></a>LL_ADC_GetMultimode</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_GetMultimode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_IT
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[196]"></a>LL_ADC_REG_StartConversion</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_REG_StartConversion
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_IT
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[197]"></a>LL_ADC_Enable</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[198]"></a>LL_ADC_GetCommonPathInternalCh</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_GetCommonPathInternalCh
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[19b]"></a>LL_ADC_GetMultiDMATransfer</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
</UL>

<P><STRONG><a name="[19c]"></a>LL_ADC_REG_IsTriggerSourceSWStart</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_REG_IsTriggerSourceSWStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
</UL>

<P><STRONG><a name="[1a8]"></a>LL_ADC_INJ_IsTriggerSourceSWStart</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[1ae]"></a>LL_ADC_REG_SetSequencerRanks</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[1af]"></a>LL_ADC_SetChannelSamplingTime</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_SetChannelSamplingTime
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[1b0]"></a>LL_ADC_SetSamplingTimeCommonConfig</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_SetSamplingTimeCommonConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[1b1]"></a>LL_ADC_SetOffset</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_ADC_SetOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[1b2]"></a>LL_ADC_SetOffsetSign</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_SetOffsetSign
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[1b3]"></a>LL_ADC_SetOffsetSaturation</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_SetOffsetSaturation
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[1b4]"></a>LL_ADC_GetOffsetChannel</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_ADC_GetOffsetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[1b5]"></a>LL_ADC_SetOffsetState</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_SetOffsetState
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[1b6]"></a>LL_ADC_SetChannelSingleDiff</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_ADC_SetChannelSingleDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[1b7]"></a>LL_ADC_SetCommonPathInternalCh</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32g4xx_hal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_SetCommonPathInternalCh
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[1b9]"></a>LL_ADC_SetAnalogWDMonitChannels</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_AnalogWDGConfig
</UL>

<P><STRONG><a name="[1ba]"></a>LL_ADC_ClearFlag_AWD1</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_AnalogWDGConfig
</UL>

<P><STRONG><a name="[1bb]"></a>LL_ADC_EnableIT_AWD1</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_AnalogWDGConfig
</UL>

<P><STRONG><a name="[1bc]"></a>LL_ADC_DisableIT_AWD1</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_AnalogWDGConfig
</UL>

<P><STRONG><a name="[1bd]"></a>LL_ADC_ClearFlag_AWD2</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_AnalogWDGConfig
</UL>

<P><STRONG><a name="[1be]"></a>LL_ADC_EnableIT_AWD2</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_AnalogWDGConfig
</UL>

<P><STRONG><a name="[1bf]"></a>LL_ADC_DisableIT_AWD2</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_AnalogWDGConfig
</UL>

<P><STRONG><a name="[1c0]"></a>LL_ADC_ClearFlag_AWD3</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_AnalogWDGConfig
</UL>

<P><STRONG><a name="[1c1]"></a>LL_ADC_EnableIT_AWD3</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_AnalogWDGConfig
</UL>

<P><STRONG><a name="[1c2]"></a>LL_ADC_DisableIT_AWD3</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_AnalogWDGConfig
</UL>

<P><STRONG><a name="[1c3]"></a>LL_ADC_ConfigAnalogWDThresholds</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32g4xx_hal_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_AnalogWDGConfig
</UL>

<P><STRONG><a name="[1c4]"></a>LL_ADC_StartCalibration</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32g4xx_hal_adc_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_StartCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[1c5]"></a>LL_ADC_IsCalibrationOnGoing</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, stm32g4xx_hal_adc_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsCalibrationOnGoing
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[1c7]"></a>LL_ADC_GetCalibrationFactor</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_GetValue
</UL>

<P><STRONG><a name="[1c9]"></a>LL_ADC_REG_IsConversionOngoing</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32g4xx_hal_adc_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_REG_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_DisableInjectedQueue
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_EnableInjectedQueue
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_RegularMultiModeStop_DMA
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_MultiModeStop_DMA
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_MultiModeStart_DMA
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedStop_IT
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedStop
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_SetValue
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_MultiModeConfigChannel
</UL>

<P><STRONG><a name="[1ca]"></a>LL_ADC_INJ_IsConversionOngoing</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_DisableInjectedQueue
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_EnableInjectedQueue
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_RegularMultiModeStop_DMA
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_RegularStop_DMA
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_RegularStop_IT
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_RegularStop
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedStart_IT
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedStart
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_SetValue
</UL>

<P><STRONG><a name="[1cb]"></a>LL_ADC_IsEnabled</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32g4xx_hal_adc_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_EnterADCDeepPowerDownMode
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_DisableVoltageRegulator
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_SetValue
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_MultiModeConfigChannel
</UL>

<P><STRONG><a name="[1cc]"></a>LL_ADC_SetCalibrationFactor</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_SetValue
</UL>

<P><STRONG><a name="[1ce]"></a>LL_ADC_GetMultimode</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedStart_IT
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedPollForConversion
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedStart
</UL>

<P><STRONG><a name="[1cf]"></a>LL_ADC_INJ_GetTrigAuto</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedStart_IT
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedStart
</UL>

<P><STRONG><a name="[1d0]"></a>LL_ADC_INJ_StartConversion</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedStart_IT
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedStart
</UL>

<P><STRONG><a name="[1d3]"></a>LL_ADC_INJ_IsTriggerSourceSWStart</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedPollForConversion
</UL>

<P><STRONG><a name="[1d4]"></a>LL_ADC_REG_IsTriggerSourceSWStart</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedPollForConversion
</UL>

<P><STRONG><a name="[1d8]"></a>LL_ADC_REG_StartConversion</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_MultiModeStart_DMA
</UL>

<P><STRONG><a name="[1df]"></a>LL_ADC_SetChannelSamplingTime</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
</UL>

<P><STRONG><a name="[1e0]"></a>LL_ADC_SetSamplingTimeCommonConfig</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
</UL>

<P><STRONG><a name="[1e1]"></a>LL_ADC_SetOffset</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
</UL>

<P><STRONG><a name="[1e2]"></a>LL_ADC_SetOffsetSign</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
</UL>

<P><STRONG><a name="[1e3]"></a>LL_ADC_SetOffsetSaturation</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
</UL>

<P><STRONG><a name="[1e4]"></a>LL_ADC_GetOffsetChannel</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
</UL>

<P><STRONG><a name="[1e5]"></a>LL_ADC_SetOffsetState</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
</UL>

<P><STRONG><a name="[1e6]"></a>LL_ADC_SetChannelSingleDiff</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
</UL>

<P><STRONG><a name="[1e7]"></a>LL_ADC_GetCommonPathInternalCh</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
</UL>

<P><STRONG><a name="[1e8]"></a>LL_ADC_SetCommonPathInternalCh</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
</UL>

<P><STRONG><a name="[1eb]"></a>LL_ADC_INJ_SetQueueMode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_DisableInjectedQueue
</UL>

<P><STRONG><a name="[1ed]"></a>LL_ADC_DisableInternalRegulator</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_DisableVoltageRegulator
</UL>

<P><STRONG><a name="[1ef]"></a>LL_ADC_EnableDeepPowerDown</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, stm32g4xx_hal_adc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_EnterADCDeepPowerDownMode
</UL>

<P><STRONG><a name="[1f0]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32g4xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[1f1]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_GetPriorityGrouping
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[1f2]"></a>NVIC_EncodePriority</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32g4xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[1f3]"></a>__NVIC_SetPriority</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32g4xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[1f4]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, stm32g4xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[1f5]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, stm32g4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[1f7]"></a>__NVIC_SystemReset</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
</UL>

<P><STRONG><a name="[1f8]"></a>SysTick_Config</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32g4xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[1fb]"></a>__NVIC_GetPriority</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32g4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_GetPriority
</UL>

<P><STRONG><a name="[1fc]"></a>NVIC_DecodePriority</STRONG> (Thumb, 118 bytes, Stack size 36 bytes, stm32g4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_GetPriority
</UL>

<P><STRONG><a name="[1fe]"></a>__NVIC_SetPendingIRQ</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, stm32g4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPendingIRQ
</UL>

<P><STRONG><a name="[200]"></a>__NVIC_GetPendingIRQ</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32g4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_GetPendingIRQ
</UL>

<P><STRONG><a name="[202]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, stm32g4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
</UL>

<P><STRONG><a name="[204]"></a>__NVIC_GetActive</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32g4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_GetActive
</UL>

<P><STRONG><a name="[207]"></a>DMA_CalcDMAMUXChannelBaseAndMask</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32g4xx_hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[208]"></a>DMA_CalcDMAMUXRequestGenBaseAndMask</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32g4xx_hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CalcDMAMUXRequestGenBaseAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[20a]"></a>DMA_SetConfig</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32g4xx_hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[20e]"></a>HRTIM_MasterBase_Config</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HRTIM_MasterBase_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_TimeBaseConfig
</UL>

<P><STRONG><a name="[20f]"></a>HRTIM_TimingUnitBase_Config</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HRTIM_TimingUnitBase_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_TimeBaseConfig
</UL>

<P><STRONG><a name="[211]"></a>HRTIM_GetDMAHandleFromTimerIdx</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_BurstDMATransfer
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_WaveformCountStop_DMA
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_WaveformCountStart_DMA
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SimpleCaptureStop_DMA
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SimpleCaptureStart_DMA
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SimplePWMStop_DMA
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SimplePWMStart_DMA
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SimpleOCStop_DMA
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SimpleOCStart_DMA
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SimpleBaseStop_DMA
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SimpleBaseStart_DMA
</UL>

<P><STRONG><a name="[73]"></a>HRTIM_DMAMasterCplt</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HRTIM_DMAMasterCplt &rArr; HAL_HRTIM_RepetitionEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_RepetitionEventCallback
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_RegistersUpdateCallback
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SynchronizationEventCallback
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Compare4EventCallback
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Compare3EventCallback
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Compare2EventCallback
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Compare1EventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_hrtim.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>HRTIM_DMATimerxCplt</STRONG> (Thumb, 620 bytes, Stack size 24 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HRTIM_DMATimerxCplt &rArr; GetTimerIdxFromDMAHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_DelayedProtectionCallback
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_CounterResetCallback
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Output2ResetCallback
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Output2SetCallback
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Output1ResetCallback
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Output1SetCallback
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Capture2EventCallback
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Capture1EventCallback
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_RepetitionEventCallback
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_RegistersUpdateCallback
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Compare4EventCallback
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Compare3EventCallback
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Compare2EventCallback
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Compare1EventCallback
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerIdxFromDMAHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_hrtim.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>HRTIM_DMAError</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HRTIM_DMAError &rArr; HAL_HRTIM_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_hrtim.o(.text)
</UL>
<P><STRONG><a name="[219]"></a>GetTimerIdxFromDMAHandle</STRONG> (Thumb, 172 bytes, Stack size 12 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetTimerIdxFromDMAHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_BurstDMACplt
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_DMATimerxCplt
</UL>

<P><STRONG><a name="[225]"></a>HRTIM_OutputConfig</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HRTIM_OutputConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SimpleOnePulseChannelConfig
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SimplePWMChannelConfig
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SimpleOCChannelConfig
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_WaveformOutputConfig
</UL>

<P><STRONG><a name="[227]"></a>HRTIM_GetITFromOCMode</STRONG> (Thumb, 370 bytes, Stack size 28 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SimpleOCStop_IT
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SimpleOCStart_IT
</UL>

<P><STRONG><a name="[22a]"></a>HRTIM_GetDMAFromOCMode</STRONG> (Thumb, 374 bytes, Stack size 28 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SimpleOCStop_DMA
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SimpleOCStart_DMA
</UL>

<P><STRONG><a name="[230]"></a>HRTIM_EventConfig</STRONG> (Thumb, 1068 bytes, Stack size 28 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_EventConfig
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SimpleOnePulseChannelConfig
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SimpleCaptureChannelConfig
</UL>

<P><STRONG><a name="[231]"></a>HRTIM_CaptureUnitConfig</STRONG> (Thumb, 174 bytes, Stack size 28 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SimpleCaptureChannelConfig
</UL>

<P><STRONG><a name="[235]"></a>HRTIM_TIM_ResetConfig</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SimpleOnePulseChannelConfig
</UL>

<P><STRONG><a name="[238]"></a>HRTIM_TimingUnitRollOver_Config</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32g4xx_hal_hrtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_RollOverModeConfig
</UL>

<P><STRONG><a name="[239]"></a>HRTIM_MasterWaveform_Config</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HRTIM_MasterWaveform_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_WaveformTimerConfig
</UL>

<P><STRONG><a name="[23a]"></a>HRTIM_TimingUnitWaveform_Config</STRONG> (Thumb, 770 bytes, Stack size 36 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HRTIM_TimingUnitWaveform_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_WaveformTimerConfig
</UL>

<P><STRONG><a name="[23b]"></a>HRTIM_ForceRegistersUpdate</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HRTIM_ForceRegistersUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_WaveformTimerConfig
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_WaveformTimerControl
</UL>

<P><STRONG><a name="[23c]"></a>HRTIM_TimingUnitWaveform_Control</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HRTIM_TimingUnitWaveform_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_WaveformTimerControl
</UL>

<P><STRONG><a name="[76]"></a>HRTIM_BurstDMACplt</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HRTIM_BurstDMACplt &rArr; GetTimerIdxFromDMAHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_BurstDMATransferCallback
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerIdxFromDMAHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_hrtim.o(.text)
</UL>
<P><STRONG><a name="[241]"></a>HRTIM_HRTIM_ISR</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HRTIM_HRTIM_ISR &rArr; HAL_HRTIM_SystemFaultCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SystemFaultCallback
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Fault6Callback
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Fault5Callback
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Fault4Callback
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Fault3Callback
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Fault2Callback
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Fault1Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_IRQHandler
</UL>

<P><STRONG><a name="[242]"></a>HRTIM_Master_ISR</STRONG> (Thumb, 456 bytes, Stack size 32 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HRTIM_Master_ISR &rArr; HAL_HRTIM_RepetitionEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_BurstModePeriodCallback
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_DLLCalibrationReadyCallback
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_RepetitionEventCallback
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_RegistersUpdateCallback
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_SynchronizationEventCallback
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Compare4EventCallback
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Compare3EventCallback
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Compare2EventCallback
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Compare1EventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_IRQHandler
</UL>

<P><STRONG><a name="[243]"></a>HRTIM_Timer_ISR</STRONG> (Thumb, 778 bytes, Stack size 24 bytes, stm32g4xx_hal_hrtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HRTIM_Timer_ISR &rArr; HAL_HRTIM_DelayedProtectionCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_DelayedProtectionCallback
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_CounterResetCallback
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Output2ResetCallback
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Output2SetCallback
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Output1ResetCallback
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Output1SetCallback
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Capture2EventCallback
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Capture1EventCallback
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_RepetitionEventCallback
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_RegistersUpdateCallback
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Compare4EventCallback
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Compare3EventCallback
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Compare2EventCallback
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_Compare1EventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HRTIM_IRQHandler
</UL>

<P><STRONG><a name="[24e]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Receive
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Transmit
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
</UL>

<P><STRONG><a name="[24f]"></a>I2C_TransferConfig</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write_DMA
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read_IT
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write_IT
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive_DMA
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit_DMA
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive_IT
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit_IT
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Mem_ISR_IT
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Mem_ISR_DMA
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_DMA
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_IT
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Abort_IT
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Seq_Receive_DMA
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Seq_Receive_IT
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Seq_Transmit_DMA
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Seq_Transmit_IT
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read_DMA
</UL>

<P><STRONG><a name="[250]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Transmit
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[251]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Receive
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Transmit
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[252]"></a>I2C_IsErrorOccurred</STRONG> (Thumb, 476 bytes, Stack size 48 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[254]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Receive
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[256]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Transmit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Mem_ISR_IT
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Mem_ISR_DMA
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_DMA
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_DMA
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_IT
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>

<P><STRONG><a name="[77]"></a>I2C_Master_ISR_IT</STRONG> (Thumb, 708 bytes, Stack size 40 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = I2C_Master_ISR_IT &rArr; I2C_ITMasterCplt &rArr; I2C_ITError &rArr; I2C_TreatErrorCallback &rArr; HAL_I2C_AbortCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterSeqCplt
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[259]"></a>I2C_Enable_IRQ</STRONG> (Thumb, 314 bytes, Stack size 12 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_Enable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write_DMA
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read_IT
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write_IT
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Receive_DMA
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Transmit_DMA
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive_DMA
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit_DMA
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Receive_IT
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Transmit_IT
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive_IT
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit_IT
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Mem_ISR_IT
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAMasterReceiveCplt
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAMasterTransmitCplt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Mem_ISR_DMA
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_DMA
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Abort_IT
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EnableListen_IT
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Seq_Receive_DMA
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Seq_Receive_IT
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Seq_Transmit_DMA
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Seq_Transmit_IT
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Seq_Receive_DMA
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Seq_Receive_IT
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Seq_Transmit_DMA
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Seq_Transmit_IT
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read_DMA
</UL>

<P><STRONG><a name="[25a]"></a>I2C_ITMasterSeqCplt</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C_ITMasterSeqCplt &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_DMA
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_IT
</UL>

<P><STRONG><a name="[25b]"></a>I2C_ITError</STRONG> (Thumb, 476 bytes, Stack size 24 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2C_ITError &rArr; I2C_TreatErrorCallback &rArr; HAL_I2C_AbortCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TreatErrorCallback
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetState
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Mem_ISR_IT
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAMasterReceiveCplt
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAError
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAMasterTransmitCplt
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Mem_ISR_DMA
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_DMA
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_DMA
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_IT
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
</UL>

<P><STRONG><a name="[25c]"></a>I2C_ITMasterCplt</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = I2C_ITMasterCplt &rArr; I2C_ITError &rArr; I2C_TreatErrorCallback &rArr; HAL_I2C_AbortCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemRxCpltCallback
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemTxCpltCallback
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Mem_ISR_IT
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Mem_ISR_DMA
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_DMA
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_IT
</UL>

<P><STRONG><a name="[78]"></a>I2C_Master_ISR_DMA</STRONG> (Thumb, 544 bytes, Stack size 40 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = I2C_Master_ISR_DMA &rArr; I2C_ITMasterCplt &rArr; I2C_ITError &rArr; I2C_TreatErrorCallback &rArr; HAL_I2C_AbortCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterSeqCplt
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>I2C_Slave_ISR_DMA</STRONG> (Thumb, 546 bytes, Stack size 40 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = I2C_Slave_ISR_DMA &rArr; I2C_ITSlaveCplt &rArr; I2C_ITError &rArr; I2C_TreatErrorCallback &rArr; HAL_I2C_AbortCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITAddrCplt
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSeqCplt
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>I2C_Mem_ISR_DMA</STRONG> (Thumb, 668 bytes, Stack size 32 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = I2C_Mem_ISR_DMA &rArr; I2C_ITMasterCplt &rArr; I2C_ITError &rArr; I2C_TreatErrorCallback &rArr; HAL_I2C_AbortCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>I2C_Slave_ISR_IT</STRONG> (Thumb, 568 bytes, Stack size 32 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = I2C_Slave_ISR_IT &rArr; I2C_ITSlaveCplt &rArr; I2C_ITError &rArr; I2C_TreatErrorCallback &rArr; HAL_I2C_AbortCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITAddrCplt
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSeqCplt
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[25f]"></a>I2C_ITSlaveCplt</STRONG> (Thumb, 740 bytes, Stack size 32 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = I2C_ITSlaveCplt &rArr; I2C_ITError &rArr; I2C_TreatErrorCallback &rArr; HAL_I2C_AbortCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSeqCplt
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_DMA
</UL>

<P><STRONG><a name="[260]"></a>I2C_ITListenCplt</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C_ITListenCplt &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_DMA
</UL>

<P><STRONG><a name="[261]"></a>I2C_ITSlaveSeqCplt</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C_ITSlaveSeqCplt &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMASlaveReceiveCplt
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMASlaveTransmitCplt
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_DMA
</UL>

<P><STRONG><a name="[262]"></a>I2C_ITAddrCplt</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_ITAddrCplt &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AddrCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_DMA
</UL>

<P><STRONG><a name="[7c]"></a>I2C_DMAMasterTransmitCplt</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_DMAMasterTransmitCplt &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>I2C_DMAError</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2C_DMAError &rArr; I2C_ITError &rArr; I2C_TreatErrorCallback &rArr; HAL_I2C_AbortCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>I2C_DMAMasterReceiveCplt</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_DMAMasterReceiveCplt &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>I2C_DMASlaveTransmitCplt</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2C_DMASlaveTransmitCplt &rArr; I2C_ITSlaveSeqCplt &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSeqCplt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[80]"></a>I2C_DMASlaveReceiveCplt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2C_DMASlaveReceiveCplt &rArr; I2C_ITSlaveSeqCplt &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSeqCplt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[269]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[26b]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[81]"></a>I2C_Mem_ISR_IT</STRONG> (Thumb, 688 bytes, Stack size 40 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = I2C_Mem_ISR_IT &rArr; I2C_ITMasterCplt &rArr; I2C_ITError &rArr; I2C_TreatErrorCallback &rArr; HAL_I2C_AbortCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[26d]"></a>I2C_Disable_IRQ</STRONG> (Thumb, 200 bytes, Stack size 12 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Mem_ISR_IT
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITAddrCplt
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSeqCplt
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Mem_ISR_DMA
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterSeqCplt
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Abort_IT
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DisableListen_IT
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Seq_Receive_DMA
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Seq_Receive_IT
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Seq_Transmit_DMA
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Seq_Transmit_IT
</UL>

<P><STRONG><a name="[273]"></a>I2C_ConvertOtherXferOptions</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, stm32g4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Seq_Receive_DMA
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Seq_Receive_IT
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Seq_Transmit_DMA
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Seq_Transmit_IT
</UL>

<P><STRONG><a name="[82]"></a>I2C_DMAAbort</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_DMAAbort &rArr; I2C_TreatErrorCallback &rArr; HAL_I2C_AbortCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TreatErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[279]"></a>I2C_TreatErrorCallback</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32g4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_TreatErrorCallback &rArr; HAL_I2C_AbortCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AbortCpltCallback
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAAbort
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>

<P><STRONG><a name="[299]"></a>RCC_GetSysClockFreqFromPLLSource</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stm32g4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_GetSysClockFreqFromPLLSource
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[2af]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Abort
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATxAbortCallback
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_AbortTx_ISR
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTx_ISR
</UL>

<P><STRONG><a name="[2b0]"></a>SPI_WaitFifoStateUntilTimeout</STRONG> (Thumb, 322 bytes, Stack size 56 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Abort
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMARxAbortCallback
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATxAbortCallback
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_AbortRx_ISR
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_AbortTx_ISR
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[2b1]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Abort
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMARxAbortCallback
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_AbortRx_ISR
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_AbortTx_ISR
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[2b3]"></a>SPI_EndRxTransaction</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_EndRxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
</UL>

<P><STRONG><a name="[83]"></a>SPI_TxISR_16BIT</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SPI_TxISR_16BIT &rArr; SPI_CloseTx_ISR &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[84]"></a>SPI_TxISR_8BIT</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SPI_TxISR_8BIT &rArr; SPI_CloseTx_ISR &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[2b4]"></a>SPI_CloseTx_ISR</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI_CloseTx_ISR &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxISR_8BIT
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxISR_16BIT
</UL>

<P><STRONG><a name="[85]"></a>SPI_RxISR_16BIT</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI_RxISR_16BIT &rArr; SPI_CloseRx_ISR &rArr; SPI_EndRxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>SPI_RxISR_8BIT</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI_RxISR_8BIT &rArr; SPI_CloseRx_ISR &rArr; SPI_EndRxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>SPI_2linesRxISR_16BIT</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI_2linesRxISR_16BIT &rArr; SPI_CloseRxTx_ISR &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[88]"></a>SPI_2linesTxISR_16BIT</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI_2linesTxISR_16BIT &rArr; SPI_CloseRxTx_ISR &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>SPI_2linesRxISR_8BIT</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI_2linesRxISR_8BIT &rArr; SPI_CloseRxTx_ISR &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>SPI_2linesTxISR_8BIT</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI_2linesTxISR_8BIT &rArr; SPI_CloseRxTx_ISR &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[2b7]"></a>SPI_CloseRx_ISR</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI_CloseRx_ISR &rArr; SPI_EndRxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxISR_8BIT
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxISR_16BIT
</UL>

<P><STRONG><a name="[2b8]"></a>SPI_CloseRxTx_ISR</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI_CloseRxTx_ISR &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesTxISR_8BIT
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesRxISR_8BIT
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesTxISR_16BIT
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesRxISR_16BIT
</UL>

<P><STRONG><a name="[8b]"></a>SPI_DMAHalfTransmitCplt</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_DMAHalfTransmitCplt &rArr; HAL_SPI_TxHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>SPI_DMATransmitCplt</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI_DMATransmitCplt &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>SPI_DMAError</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_DMAError &rArr; HAL_SPI_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>SPI_DMAHalfReceiveCplt</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_DMAHalfReceiveCplt &rArr; HAL_SPI_RxHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>SPI_DMAReceiveCplt</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI_DMAReceiveCplt &rArr; SPI_EndRxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>SPI_DMAHalfTransmitReceiveCplt</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_DMAHalfTransmitReceiveCplt &rArr; HAL_SPI_TxRxHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>SPI_DMATransmitReceiveCplt</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI_DMATransmitReceiveCplt &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[92]"></a>SPI_AbortTx_ISR</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SPI_AbortTx_ISR &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[93]"></a>SPI_AbortRx_ISR</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_AbortRx_ISR &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>SPI_DMATxAbortCallback</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SPI_DMATxAbortCallback &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_AbortCpltCallback
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[95]"></a>SPI_DMARxAbortCallback</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI_DMARxAbortCallback &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_AbortCpltCallback
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[96]"></a>SPI_DMAAbortOnError</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32g4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_DMAAbortOnError &rArr; HAL_SPI_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[97]"></a>TIM_DMAPeriodElapsedCplt</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = TIM_DMAPeriodElapsedCplt &rArr; HAL_TIM_PeriodElapsedCallback &rArr; OTP &rArr; GET_NTC_Temperature &rArr; calculateTemperature &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[98]"></a>TIM_DMAPeriodElapsedHalfCplt</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_DMAPeriodElapsedHalfCplt &rArr; HAL_TIM_PeriodElapsedHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[9a]"></a>TIM_DMADelayPulseCplt</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_DMADelayPulseCplt &rArr; HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[30b]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 372 bytes, Stack size 20 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_ConfigChannel
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[30d]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 398 bytes, Stack size 20 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[30e]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 400 bytes, Stack size 20 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[30f]"></a>TIM_OC5_SetConfig</STRONG> (Thumb, 226 bytes, Stack size 20 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC5_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[310]"></a>TIM_OC6_SetConfig</STRONG> (Thumb, 228 bytes, Stack size 20 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC6_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[313]"></a>TIM_TI2_SetConfig</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_ConfigChannel
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[314]"></a>TIM_TI3_SetConfig</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[315]"></a>TIM_TI4_SetConfig</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[a0]"></a>TIM_DMATriggerCplt</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_DMATriggerCplt &rArr; HAL_TIM_TriggerCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[a1]"></a>TIM_DMATriggerHalfCplt</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_DMATriggerHalfCplt &rArr; HAL_TIM_TriggerHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[320]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>

<P><STRONG><a name="[321]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[322]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32g4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>

<P><STRONG><a name="[324]"></a>TIM_SlaveTimer_SetConfig</STRONG> (Thumb, 420 bytes, Stack size 40 bytes, stm32g4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchro_IT
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchro
</UL>

<P><STRONG><a name="[331]"></a>TIM_CCxNChannelCmd</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32g4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OnePulseN_Stop_IT
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OnePulseN_Start_IT
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OnePulseN_Stop
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OnePulseN_Start
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Stop_DMA
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start_DMA
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Stop_IT
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start_IT
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Stop
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Stop_DMA
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Start_DMA
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Stop_IT
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Start_IT
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Stop
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Start
</UL>

<P><STRONG><a name="[a2]"></a>TIM_DMADelayPulseNCplt</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, stm32g4xx_hal_tim_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_DMADelayPulseNCplt &rArr; HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_tim_ex.o(.text)
</UL>
<P><STRONG><a name="[a3]"></a>TIM_DMAErrorCCxN</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32g4xx_hal_tim_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_DMAErrorCCxN &rArr; HAL_TIM_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_tim_ex.o(.text)
</UL>
<P><STRONG><a name="[34e]"></a>UART_EndRxTransfer</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[a4]"></a>UART_TxISR_16BIT_FIFOEN</STRONG> (Thumb, 206 bytes, Stack size 20 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_TxISR_16BIT_FIFOEN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[a5]"></a>UART_TxISR_8BIT_FIFOEN</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_TxISR_8BIT_FIFOEN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[a6]"></a>UART_TxISR_16BIT</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_TxISR_16BIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>UART_TxISR_8BIT</STRONG> (Thumb, 142 bytes, Stack size 12 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_TxISR_8BIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>UART_RxISR_16BIT_FIFOEN</STRONG> (Thumb, 776 bytes, Stack size 64 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_RxISR_16BIT_FIFOEN &rArr; HAL_UARTEx_RxEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[a9]"></a>UART_RxISR_8BIT_FIFOEN</STRONG> (Thumb, 772 bytes, Stack size 64 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_RxISR_8BIT_FIFOEN &rArr; HAL_UARTEx_RxEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[aa]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_RxISR_16BIT &rArr; HAL_UARTEx_RxEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[ab]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 384 bytes, Stack size 32 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_RxISR_8BIT &rArr; HAL_UARTEx_RxEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_DMATransmitCplt &rArr; HAL_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_DMATxHalfCplt &rArr; HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>UART_DMAError</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_DMAError &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[354]"></a>UART_EndTxTransfer</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_EndTxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[af]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_DMAReceiveCplt &rArr; HAL_UARTEx_RxEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_DMARxHalfCplt &rArr; HAL_UARTEx_RxEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>UART_DMATxAbortCallback</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_DMATxAbortCallback &rArr; HAL_UART_AbortCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>UART_DMARxAbortCallback</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_DMARxAbortCallback &rArr; HAL_UART_AbortCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>UART_DMATxOnlyAbortCallback</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_DMATxOnlyAbortCallback &rArr; HAL_UART_AbortTransmitCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmitCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>UART_DMARxOnlyAbortCallback</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_DMARxOnlyAbortCallback &rArr; HAL_UART_AbortReceiveCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceiveCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_DMAAbortOnError &rArr; HAL_UART_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[365]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32g4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[36f]"></a>UARTEx_Wakeup_AddressConfig</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32g4xx_hal_uart_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
</UL>

<P><STRONG><a name="[371]"></a>UARTEx_SetNbDataToProcess</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32g4xx_hal_uart_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableFifoMode
</UL>

<P><STRONG><a name="[395]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[385]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
</UL>

<P><STRONG><a name="[397]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[396]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b8]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[b9]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
